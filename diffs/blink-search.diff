diff --git a/backend/blink-search-imenu.el b/backend/blink-search-imenu.el
index 4fbe3e9..c9be868 100644
--- a/backend/blink-search-imenu.el
+++ b/backend/blink-search-imenu.el
@@ -90,12 +90,26 @@
                              (with-current-buffer blink-search-start-buffer
                                (blink-search-imenu-get-candidates)))))
 
+(defun blink-search-imenu-get-candidates-refine-name (name)
+  (let ((name (substring-no-properties name)))
+    (cond
+     ((string-match-p "^Functions " name)
+      (concat (replace-regexp-in-string "^Functions " "" name)
+              " (fun)"))
+     ((string-match-p "^Section " name)
+      (concat (replace-regexp-in-string "^Section " "" name)
+              " (sec)"))
+     ((string-match-p "^Types " name)
+      (concat (replace-regexp-in-string "^Types " "" name)
+              " (type)"))
+     ((string-match-p "^Variables " name)
+      (concat (replace-regexp-in-string "^Variables " "" name)
+              " (var)"))
+     (t name))))
+
 (defun blink-search-imenu-get-candidates ()
-  (mapcar (lambda (info) (list (car info) (marker-position (cdr info))))
-          (let* ((index (ignore-errors (imenu--make-index-alist t))))
-            (when index
-              (blink-search-imenu-build-candidates
-               (delete (assoc "*Rescan*" index) index))))))
+  (cl-loop for elm in (ignore-errors (consult-imenu--items))
+           collect (list (blink-search-imenu-get-candidates-refine-name (car elm)) (marker-position (cdr elm)))))
 
 (defun blink-search-imenu-build-candidates (alist)
   (cl-remove-if
@@ -127,6 +141,8 @@
   (goto-char point)
   (blink-search-flash-locate))
 
+
+
 (add-to-list 'blink-search-start-update-list #'blink-search-init-imenu t)
 
 (provide 'blink-search-imenu)
diff --git a/backend/search_common_directory.py b/backend/search_common_directory.py
index dff800e..31ab97c 100644
--- a/backend/search_common_directory.py
+++ b/backend/search_common_directory.py
@@ -21,6 +21,7 @@
 
 import re
 import os
+import sexpdata
 
 from core.search import Search
 from core.utils import eval_in_emacs, get_emacs_var    # type: ignore
@@ -64,7 +65,11 @@ class SearchCommonDirectory(Search):
                     return os.path.join(directory, candidate.replace(prefix, "").strip())
         
         return None
-        
+
+    def update(self, items):
+        items = list(filter(lambda item: type(item) is not sexpdata.Symbol, items))
+        self.items = items
+
     def do(self, candidate):
         candidate_dir = self.get_candiate_dir(candidate)
         if candidate_dir != None:
diff --git a/backend/search_eaf_browser_history.py b/backend/search_eaf_browser_history.py
index bdbb5ce..bedaeeb 100644
--- a/backend/search_eaf_browser_history.py
+++ b/backend/search_eaf_browser_history.py
@@ -41,14 +41,19 @@ class SearchEAFBrowserHistory(Search):
                 histories = []
                 with open(eaf_browser_history_path, encoding="utf-8") as f:
                     histories = f.read().splitlines()
-                
+
+                if len(prefix) == 0:
+                    return [' '.join(history.split("ᛡ")[0].split("ᛝ")) for history in histories]
+
                 match_histories = []
-                prefix_regexp = re.compile(".*" + ".*".join(prefix.split()))
+                prefix_regexp = [re.compile( ".*".join(p), re.IGNORECASE) for p in prefix.split()]
                 for history in histories:
                     history_infos = history.split("ᛡ")[0].split("ᛝ")
-                    if prefix_regexp.match(history_infos[0].lower()) or prefix_regexp.match(history_infos[1].lower()):
-                        match_histories.append(" ".join(history_infos))
-                        
+                    for pr in prefix_regexp:
+                        if pr.match(history_infos[0]) or pr.match(history_infos[1]):
+                            match_histories.append(" ".join(history_infos))
+                            break
+
                 return match_histories
                         
     def do(self, candidate):
diff --git a/backend/search_imenu.py b/backend/search_imenu.py
index e61cd28..e8ca43a 100755
--- a/backend/search_imenu.py
+++ b/backend/search_imenu.py
@@ -39,11 +39,21 @@ class SearchIMenu(Search):
             self.item_dict[str(item[0])] = item[1]
         
     def search_match(self, prefix: str):
-        prefix_regexp = re.compile(".*" + ".*".join(prefix.replace("*", "").split()), re.IGNORECASE)
-        return list(filter(lambda symbol: self.is_match(prefix, prefix_regexp, symbol), self.item_dict.keys()))
-    
+        prefix = prefix.replace("*", "")
+        prefix_regexps = []
+        for p in prefix.split():
+            prefix_regexps.append([p, re.compile(".*"+p, re.IGNORECASE)])
+
+        items = list(self.item_dict.keys())
+        for p, p_regexps in prefix_regexps:
+            items = list(filter(lambda symbol: self.is_match(p, p_regexps, symbol), items))
+
+        return items
+
     def do(self, candidate):
         if candidate in self.item_dict:
             eval_in_emacs("blink-search-imenu-do", self.item_dict[candidate])
-        
-        
+
+    def select(self, candidate, start_buffer_name):
+        if candidate in self.item_dict:
+            eval_in_emacs("blink-search-imenu-preview", self.item_dict[candidate])
diff --git a/backend/search_recent_file.py b/backend/search_recent_file.py
index 78364d2..2eaf4f0 100755
--- a/backend/search_recent_file.py
+++ b/backend/search_recent_file.py
@@ -21,6 +21,7 @@
 
 import re
 import os
+import sexpdata
 
 from core.utils import eval_in_emacs
 from core.search import Search    # type: ignore
@@ -37,3 +38,11 @@ class SearchRecentFile(Search):
     def parent(self, candidate):
         eval_in_emacs("blink-search-open-file", os.path.dirname(candidate))
 
+    def update(self, items):
+        items = list(filter(lambda item: type(item) is not sexpdata.Symbol, items))
+        for i, item in enumerate(items):
+            if type(item) is str and len(item) > 0 and\
+               items[i][-1] == '/':
+                items[i] = item[:-1]
+        self.items = items
+
diff --git a/blink-search-epc.el b/blink-search-epc.el
index e6b31fd..176ba19 100644
--- a/blink-search-epc.el
+++ b/blink-search-epc.el
@@ -108,7 +108,7 @@ Mainly this function is called by timer asynchronously."
           (setq value (blink-search-deferred-exec-task d which arg))
         (error
          (blink-search-deferred-log "ERROR : %s" err)
-         (message "deferred error : %s" err)))
+         (message (substring (format "deferred error : %s" err) 0 100))))
       value)))
 
 ;; Struct: blink-search-deferred-object
diff --git a/blink-search.el b/blink-search.el
index 2b72599..9f36b6b 100644
--- a/blink-search.el
+++ b/blink-search.el
@@ -424,7 +424,7 @@ you need customize option if some 'M + key' conflict with your command.")
     (define-key map (kbd "M-w") 'blink-search-copy)
 
     (dolist (key blink-search-quick-keys)
-      (define-key map (kbd (format "M-%s" key)) 'blink-search-quick-do))
+      (define-key map (kbd (format "s-%s" key)) 'blink-search-quick-do))
     map)
   "Keymap used by `blink-search-mode'.")
 
@@ -440,7 +440,13 @@ you need customize option if some 'M + key' conflict with your command.")
     (evil-set-initial-state 'blink-search-mode 'emacs))
   )
 
-;;;###autoload
+(defun blink-search-set-eaf--mac-frame ()
+  (if (frame-parameter (selected-frame) 'eaf--mac-frame)
+        (set-window-configuration (frame-parameter (selected-frame) 'eaf--mac-frame)))
+    (set-frame-parameter  blink-search-posframe-emacs-frame
+                          'eaf--mac-frame nil)
+    (advice-remove 'eaf--mac-focus-change :after ))
+
 (defun blink-search-quit ()
   (interactive)
   (blink-search-call-async "clean")
@@ -459,8 +465,9 @@ you need customize option if some 'M + key' conflict with your command.")
       (when (and (eq system-type 'darwin) (featurep 'eaf)
                  (eaf-emacs-not-use-reparent-technology)
                  eaf--mac-safe-focus-change)
-        (set-frame-parameter  blink-search-posframe-emacs-frame
-                              'eaf--mac-frame nil)))
+        (advice-add 'eaf--mac-focus-change :after #'blink-search-set-eaf--mac-frame))
+
+        (set-cursor-color (get 'cursor 'evil-normal-color)))
 
     (setq blink-search-start-buffer nil)))
 
@@ -594,6 +601,8 @@ blink-search will search current symbol if you call this function with `C-u' pre
              (blink-search-call-async "search" (substring input 1) (blink-search-get-row-number) (list "Grep File")))
             ((string-prefix-p ";" input)
              (blink-search-call-async "search" (substring input 1) (blink-search-get-row-number) (list "Grep PDF")))
+            ((string-prefix-p "," input)
+             (blink-search-call-async "search" (substring input 1) (blink-search-get-row-number) (list "IMenu")))
             (t
              (blink-search-call-async "search" input (blink-search-get-row-number) blink-search-search-backends))))))
 
@@ -657,6 +666,7 @@ blink-search will search current symbol if you call this function with `C-u' pre
   (unless (stringp candidate-info)
     (plist-get candidate-info :matches)))
 
+(setq blink-search-candidate-old-select-index -1)
 (defun blink-search-render ()
   (let ((candidate-items blink-search-candidate-items)
         (candidate-select-index blink-search-candidate-select-index)
@@ -712,6 +722,18 @@ blink-search will search current symbol if you call this function with `C-u' pre
                        candidate-prefix
                        candidate-prefix-length
                        candidate-line)
+                  ;; keep syntax highlight
+                  (when (and (equal backend "Current Buffer")
+                             (string-match "^\\([[:digit:]]+\\):\\([[:digit:]]+\\): " candidate))
+                      (let ((line (string-to-number  (match-string 1 candidate)))
+                            (char (string-to-number  (match-string 2 candidate))))
+                        (with-current-buffer blink-search-start-buffer
+                          (save-excursion
+                            (goto-line line)
+                            (setq candidate
+                                  (format "%s:%s: %s"
+                                          line char
+                                          (buffer-substring (line-beginning-position) (line-end-position))))))))
 
                   (setq candidate-prefix
                         (concat
@@ -757,7 +779,10 @@ blink-search will search current symbol if you call this function with `C-u' pre
                                  (backward-char 1)
                                  (setq match-end-point (+ (point) candidate-prefix-length))
                                  (list match-start-point match-end-point)))))
-                        (add-face-text-property (nth 0 match-column) (nth 1 match-column) 'font-lock-type-face 'append candidate-line)
+                        (if (equal backend "Current Buffer")
+                            ;; highlight matches for current buffer
+                            (add-face-text-property (nth 0 match-column) (nth 1 match-column) 'blink-search-select-face nil candidate-line)
+                          (add-face-text-property (nth 0 match-column) (nth 1 match-column) 'font-lock-type-face 'append candidate-line))
                         )))
 
                   (when (equal candidate-index candidate-select-index)
@@ -794,7 +819,17 @@ blink-search will search current symbol if you call this function with `C-u' pre
                       (insert backend-line)
 
                       (setq backend-index (1+ backend-index))))))))
-          )))))
+          )))
+
+    ;; Preview candidate when idle, avoid `find-file' slow down candidate select
+    (if (equal backend-name "Grep PDF")
+        (unless (eq blink-search-candidate-select-index blink-search-candidate-old-select-index)
+          ;; update when move
+          (setq blink-search-candidate-old-select-index blink-search-candidate-select-index)
+          (run-with-idle-timer 0.1 nil #'(lambda () (blink-search-call-async "select_candidate_item"))))
+      (run-with-idle-timer 0.1 nil #'(lambda () (blink-search-call-async "select_candidate_item"))))
+     ;;(run-with-idle-timer 0.1 nil #'(lambda () (blink-search-call-async "select_candidate_item")))
+     ))
 
 (defun blink-search-update-items (candidate-items
                                   candidate-select-index
@@ -1008,8 +1043,18 @@ Function `move-to-column' can't handle mixed string of Chinese and English corre
   (setq blink-search-posframe-emacs-frame (selected-frame))
   (setq blink-search-posframe-frame (blink-search-posframe-show blink-search-input-buffer))
 
+  (when (and (eq system-type 'darwin) (featurep 'eaf)
+             (eaf-emacs-not-use-reparent-technology)
+             eaf--mac-safe-focus-change)
+    (set-frame-parameter (selected-frame)
+                         'eaf--mac-frame (current-window-configuration))
+    (eaf--mac-replace-eaf-buffers))
+
   (select-frame-set-input-focus blink-search-posframe-frame)
 
+  (unless (window-live-p blink-search-posframe-preview-window)
+    (setq blink-search-posframe-preview-window nil))
+
   (when (equal (length (window-list)) 1)
     (split-window (selected-window) (line-pixel-height) 'below t)
     (split-window (selected-window) nil 'right t)
diff --git a/blink_search.py b/blink_search.py
index 4deeb76..4db52a7 100755
--- a/blink_search.py
+++ b/blink_search.py
@@ -372,7 +372,8 @@ class BlinkSearch:
                 self.update_render_candidate_items()
                 self.update_render_index_and_offset()
                 self.render_items()
-            
+
+
     def select_next_backend_item(self):
         need_update = True
         
diff --git a/core/search.py b/core/search.py
index e9b1796..280178e 100644
--- a/core/search.py
+++ b/core/search.py
@@ -62,16 +62,29 @@ class Search:
             })
             
     def update(self, items):
+        items = filter(lambda item: type(item) is not sexpdata.Symbol, items)
         self.items = sorted(items, key=len)
         
     def is_match(self, prefix, prefix_regexp, symbol):
         return symbol.startswith(prefix) or symbol.replace("-", "").startswith(prefix) or prefix in symbol or prefix_regexp.match(symbol)
     
-    def search_match(self, prefix):
+    def _search_match(self, prefix):
         prefix = prefix.replace("*", "")
         prefix_regexp = re.compile(".*" + ".*".join(prefix.split()), re.IGNORECASE)
         return list(filter(lambda symbol: self.is_match(prefix, prefix_regexp, symbol), self.items))
-    
+
+    def search_match(self, prefix):
+        prefix = prefix.replace("*", "")
+        prefix_regexps = []
+        for p in prefix.split():
+            prefix_regexps.append([p, re.compile(".*"+p, re.IGNORECASE)])
+
+        items = self.items
+        for p, p_regexps in prefix_regexps:
+            items = list(filter(lambda symbol: self.is_match(p, p_regexps, symbol), items))
+
+        return items
+
     def get_process_result(self, command_list, cwd=None):
         self.kill_sub_process()
             
