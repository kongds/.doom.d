diff --git a/acm/acm-backend-codeium.el b/acm/acm-backend-codeium.el
index 32a6713..0de0c2a 100644
--- a/acm/acm-backend-codeium.el
+++ b/acm/acm-backend-codeium.el
@@ -160,6 +160,7 @@
 (defun acm-backend-codeium-candidate-expand (candidate-info bound-start &optional preview)
   ;; We need replace whole area with codeium label.
   (let ((end-position (line-end-position)))
+    (setq end-position (point))
     (forward-line (- (plist-get candidate-info :line) (count-lines (point-min) (line-beginning-position))))
     (if preview
         (acm-preview-create-overlay (point) end-position (plist-get candidate-info :label))
diff --git a/acm/acm-backend-copilot.el b/acm/acm-backend-copilot.el
index f038ae1..048b860 100644
--- a/acm/acm-backend-copilot.el
+++ b/acm/acm-backend-copilot.el
@@ -61,6 +61,7 @@ in the proxy plist. For example:
 (defun acm-backend-copilot-candidate-expand (candidate-info bound-start &optional preview)
   ;; We need replace whole area with copilot label.
   (let ((end-position (line-end-position)))
+    (setq end-position (point))
     (forward-line (- (plist-get candidate-info :line) (count-lines (point-min) (line-beginning-position))))
     (if preview
         (acm-preview-create-overlay (point) end-position (plist-get candidate-info :label))
diff --git a/acm/acm-frame.el b/acm/acm-frame.el
index 72250fe..fd74731 100644
--- a/acm/acm-frame.el
+++ b/acm/acm-frame.el
@@ -155,13 +155,15 @@
                 ))
   (add-function :after after-focus-change-function #'acm-frame-restore-font))
 
-(cl-defmacro acm-frame-new (frame frame-buffer buffer-name &optional max-width max-height popup-pos)
+(cl-defmacro acm-frame-new (frame frame-buffer buffer-name &optional max-width max-height popup-pos margin)
   `(progn
      (when (and (frame-live-p ,frame)
                 (not (eq (frame-parent ,frame) (selected-frame))))
        (acm-frame-delete-frame ,frame))
 
-     (acm-frame-create-frame-if-not-exist ,frame ,frame-buffer ,buffer-name 1 t)
+     (if ,margin
+         (acm-frame-create-frame-if-not-exist ,frame ,frame-buffer ,buffer-name ,margin t)
+       (acm-frame-create-frame-if-not-exist ,frame ,frame-buffer ,buffer-name 1 t))
 
      (acm-frame-set-frame-max-size ,frame ,max-width ,max-height)
 
diff --git a/acm/acm.el b/acm/acm.el
index 9f13d69..a6a45e2 100644
--- a/acm/acm.el
+++ b/acm/acm.el
@@ -238,7 +238,8 @@
     (define-key map "\M-." #'acm-select-first)
     (define-key map "\C-v" #'acm-select-next-page)
     (define-key map "\M-v" #'acm-select-prev-page)
-    (define-key map [tab]  #'acm-complete)
+    (define-key map [tab]  #'acm-select-next)
+    (define-key map [backtab]  #'acm-select-prev)
     (define-key map "\C-m" #'acm-complete)
     (define-key map "\t" #'acm-complete)
     (define-key map "\n" #'acm-complete)
@@ -250,6 +251,16 @@
     (define-key map "\M-k" #'acm-doc-scroll-down)
     (define-key map "\M-l" #'acm-hide)
     (define-key map "\C-g" #'acm-hide)
+    ;;(define-key map "1" #'acm-insert-number-or-complete-candiate)
+    ;;(define-key map "2" #'acm-insert-number-or-complete-candiate)
+    (define-key map "3" #'acm-insert-number-or-complete-candiate)
+    (define-key map "4" #'acm-insert-number-or-complete-candiate)
+    (define-key map "5" #'acm-insert-number-or-complete-candiate)
+    (define-key map "6" #'acm-insert-number-or-complete-candiate)
+    (define-key map "7" #'acm-insert-number-or-complete-candiate)
+    (define-key map "8" #'acm-insert-number-or-complete-candiate)
+    (define-key map "9" #'acm-insert-number-or-complete-candiate)
+    ;;(define-key map "0" #'acm-insert-number-or-complete-candiate)
     map)
   "Keymap used when popup is shown.")
 
@@ -597,6 +608,12 @@ Only calculate template candidate when type last character."
               (max (- acm-menu-length (+ (length template-first-part-candidates) (length tabnine-candidates)))
                    mode-candidates-min-index))
 
+        ;; always show codeium candidates
+        (when codeium-candidates
+          (setq mode-candidates-split-index
+                (max (- mode-candidates-split-index (length codeium-candidates))
+                     mode-candidates-min-index)))
+
         ;; Build mode candidates.
         (if (> (length mode-candidates) mode-candidates-split-index)
             (progn
@@ -657,7 +674,8 @@ The key of candidate will change between two LSP results."
            (not (member (plist-get (nth 0 candidates) :annotation) '("Emmet Abbreviation" "Snippet" "Yas-Snippet" "Tempel" "Org roam"))))
       (acm-hide))
      ((> (length candidates) 0)
-      (let* ((menu-old-cache (cons acm-menu-max-length-cache acm-menu-number-cache)))
+      (let* ((menu-old-cache (cons acm-menu-max-length-cache acm-menu-number-cache))
+             (need-update t))
         ;; Enable acm-mode to inject mode keys.
         (acm-mode 1)
 
@@ -672,8 +690,11 @@ The key of candidate will change between two LSP results."
           ;; First init `acm-menu-index' to 0.
           (setq-local acm-menu-index 0)
 
+          ;; NOTE: update as lsp-bridge, always need-update
+          ;; (setq need-update (not (equal (length acm-menu-candidates) (length menu-candidates))))
           ;; The following code is specifically to adjust the selection position of candidate when typing fast.
           (when (and current-select-candidate-index
+                     need-update
                      (> (length candidates) 1))
             (cond
              ;; Swap the position of the first two candidates
@@ -692,18 +713,19 @@ The key of candidate will change between two LSP results."
               (setq-local acm-menu-index 1)))))
 
         ;; Set candidates and menu candidates.
+
         (setq-local acm-candidates candidates)
         (setq-local acm-menu-candidates menu-candidates)
 
-        ;; Init colors.
-        (acm-frame-init-colors)
-
-        ;; Record menu popup position and buffer.
-        (setq acm-menu-frame-popup-point (or (car bounds) (point)))
-
         ;; `posn-at-point' will failed in CI, add checker make sure CI can pass.
         ;; CI don't need popup completion menu.
-        (when (posn-at-point acm-menu-frame-popup-point)
+        (when need-update ;;(posn-at-point acm-menu-frame-popup-point)
+          ;; Init colors.
+          (acm-frame-init-colors)
+
+          ;; Record menu popup position and buffer.
+          (setq acm-menu-frame-popup-point (or (car bounds) (point)))
+
           (setq acm-menu-frame-popup-position
                 (acm-frame-get-popup-position acm-menu-frame-popup-point))
 
@@ -954,7 +976,7 @@ The key of candidate will change between two LSP results."
                         (+ cursor-y offset-y)))))
     (acm-frame-set-frame-position acm-menu-frame acm-frame-x acm-frame-y)))
 
-(defun acm-doc-try-show (&optional update-completion-item)
+(defun acm-doc-try-show2 (&optional update-completion-item)
   ;; We need call `acm-backend-*-candidate-doc' function even option `acm-enable-doc' is nil,
   ;; because `completion_item_resolve' will fetch `additionalTextEdits', otherwise, auto import feature is miss.
   (let* ((candidate (acm-menu-current-candidate))
@@ -1001,6 +1023,19 @@ The key of candidate will change between two LSP results."
           ;; Hide doc frame immediately if backend is not LSP.
           (_ (acm-doc-hide)))))))
 
+(defvar acm-doc-show-timer nil)
+(defvar acm-doc-show-delay 0.5)
+
+(defun acm-doc-try-show (&optional update-completion-item)
+  "Show doc frame."
+  (acm-doc-hide)
+  (acm-cancel-timer acm-doc-show-timer)
+  (setq acm-doc-show-timer
+        (run-with-idle-timer acm-doc-show-delay nil
+                             (lambda ()
+                               (if (frame-visible-p acm-menu-frame)
+                                   (acm-doc-try-show2 update-completion-item))))))
+
 (defun acm-doc-frame-adjust ()
   (let* ((emacs-width (frame-pixel-width))
          (emacs-height (frame-pixel-height))
diff --git a/core/codeium.py b/core/codeium.py
index eb97e6d..6ff7614 100644
--- a/core/codeium.py
+++ b/core/codeium.py
@@ -23,6 +23,8 @@ import time
 import traceback
 import urllib.parse
 import urllib.request
+from distutils.version import StrictVersion
+import threading
 
 from core.utils import *
 
@@ -44,6 +46,11 @@ class Codeium:
         self.counter = 1
         self.wait_request = []
 
+    def cancel_copmlete(self):
+        for _ in self.wait_request:
+            self.metadata['request_id'] = self.wait_request.pop()
+            self.post_request(self.make_url('CancelRequest'), {'metadata': self.metadata})
+
     def complete(
         self,
         cursor_offset,
@@ -58,16 +65,13 @@ class Codeium:
         self.get_info()
         self.run_local_server()
 
+        # thread = threading.Thread(target=self.cancel_copmlete)
+        # thread.start()
+
         # utf-8 cursor offset
         cursor_offset = len(text[:cursor_offset].encode("utf-8", errors="ignore"))
         self.current_cussor_offset = cursor_offset
 
-        for _ in self.wait_request:
-            self.metadata["request_id"] = self.wait_request.pop()
-            self.post_request(
-                self.make_url("CancelRequest"), {"metadata": self.metadata}
-            )
-
         self.metadata["request_id"] = self.counter
         self.wait_request.append(self.counter)
         self.counter += 1
@@ -84,6 +88,7 @@ class Codeium:
             "editor_options": {"insert_spaces": True if insert_spaces else False, "tab_size": tab_size},
         }
 
+
         self.dispatch(
             self.post_request(self.make_url("GetCompletions"), data),
             editor_language,
@@ -146,16 +151,12 @@ class Codeium:
                 labels = label.strip().split("\n")
                 first_line = labels[0]
 
-                document = f"```{language}\n{label}\n```"
-
-                # Don't make display label bigger than max length.
-                display_label = first_line
-                if len(first_line) > self.display_label_max_length:
-                    display_label = "... " + display_label[len(first_line) - self.display_label_max_length:]
+                # document = f"```{language}\n{label}\n```" if len(labels) > 1 else ""
+                document = label if len(labels) > 1 else ""
 
-                # Only hide documentation when label smaller than max length and only 1 line
-                if len(labels) <= 1 and len(first_line) <= self.display_label_max_length:
-                        document = ""
+                display_label = labels[0]
+                if len(display_label) > self.display_label_max_length or len(labels) > 1:
+                        display_label = display_label[:self.display_label_max_length - 4] + " ..."
 
                 completion_parts = completion.get("completionParts", [{}])[0]
                 annotation = (
@@ -189,6 +190,8 @@ class Codeium:
         )
 
     def make_url(self, api):
+
+        #return "http://127.0.0.1:63691/exa.language_server_pb.LanguageServerService/{api}"
         return f"http://127.0.0.1:{self.server_port}/exa.language_server_pb.LanguageServerService/{api}"
 
     def run_local_server(self):
@@ -206,11 +209,17 @@ class Codeium:
             params += [
                 "--api_server_url",
                 f"https://{self.api_server_host}:{str(self.api_server_port)}",
+                "--detect_proxy=false",
             ]
 
-            process = subprocess.Popen(params)
+
+            # not output log to *lsp-bridge* buffer
+            # process = subprocess.Popen(params, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
+            process = subprocess.Popen(params)#, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
 
             self.get_server_port()
+            print(f"Codeium local server is running on port {self.server_port}.")
+
         except:
             self.is_run = False
 
@@ -293,5 +302,5 @@ class Codeium:
                 response_data = response.read().decode("utf-8")
                 return parse_json_content(response_data)
         except Exception as e:
-            print("Codeium request error", e, url)
+            # print("Codeium request error", e, url)
             return {}
diff --git a/core/fileaction.py b/core/fileaction.py
index b55480f..e2a0975 100755
--- a/core/fileaction.py
+++ b/core/fileaction.py
@@ -213,15 +213,19 @@ class FileAction:
             if isinstance(self.completion_block_kind_list, list):
                 self.completion_block_kind_list = list(map(lambda x: x.lower(), self.completion_block_kind_list))
 
-        delay = 0 if is_running_in_server() else 0.1
-        self.try_completion_timer = threading.Timer(delay, lambda : self.try_completion(position, before_char, prefix, self.version))
-        self.try_completion_timer.start()
+        if position['line'] < 0:
+            print("error in change file", start, end, range_length, change_text, position, before_char, buffer_name, prefix, self.org_line_bias)
+        else:
+            delay = 0 if is_running_in_server() else 0.1
+            self.try_completion_timer = threading.Timer(delay, lambda : self.try_completion(position, before_char, prefix, self.version))
+            self.try_completion_timer.start()
 
     def update_file(self, buffer_name, org_line_bias=None):
         self.org_line_bias = org_line_bias
         buffer_content = get_buffer_content(self.filepath, buffer_name)
         for lsp_server in self.get_lsp_servers():
             lsp_server.send_whole_change_notification(self.filepath, self.version, buffer_content)
+            print(lsp_server, 'update_file')
         self.version += 1
 
     def try_completion(self, position, before_char, prefix, version=None):
@@ -290,6 +294,10 @@ class FileAction:
             for diagnostic in self.diagnostics[server_name]:
                 if hide_severities and diagnostic["severity"] in hide_severities:
                     continue
+                if 'imported but unused' in diagnostic['message']:
+                    continue
+                if 'is not accessed' in diagnostic['message']:
+                    continue
                 diagnostic["server-name"] = server_name
                 diagnostics.append(diagnostic)
 
@@ -464,7 +472,13 @@ class FileAction:
     def rename_file(self, old_filepath, new_filepath):
         self.get_lsp_servers()[0].send_did_rename_files_notification(old_filepath, new_filepath)
 
+    completion_request_ids = -1
     def send_server_request(self, lsp_server, handler_name, *args, **kwargs):
+        if self.completion_request_ids > 0 and handler_name == "completion":
+            # Drop completion request if previous completion request is not finished.
+            print("Drop completion request for {}".format(self.filepath), self.completion_request_ids)
+            # return
+
         handler: Handler = self.method_handlers[lsp_server.server_info["name"]][handler_name]
 
         handler.latest_request_id = request_id = generate_request_id()
@@ -481,6 +495,10 @@ class FileAction:
             params=params,
             request_id=request_id)
 
+        if handler_name == "completion":
+            self.completion_request_ids = request_id
+            self.completion_start_time = time.time()
+        
     def exit(self):
         for lsp_server in (self.org_lang_servers.values() if self.org_file else self.get_lsp_servers()):
             if lsp_server.server_name in LSP_SERVER_DICT:
diff --git a/core/handler/document_symbol.py b/core/handler/document_symbol.py
index 210f689..4666c92 100644
--- a/core/handler/document_symbol.py
+++ b/core/handler/document_symbol.py
@@ -26,8 +26,8 @@ class DocumentSymbol(Handler):
                        (range['end']['line'] == self.position['line'] and range['end']['character'] >= self.position['character']):
                         if len(current_defun):
                             current_defun += '.'
-                            current_defun += symbol['name']
-                            symbols.append(symbol)
+                        current_defun += symbol['name']
+                        symbols.append(symbol)
                 eval_in_emacs("lsp-bridge-symbols--record-current-defun", current_defun)
             except:
                 import traceback
diff --git a/core/lspserver.py b/core/lspserver.py
index 7b29f7d..eedbc49 100755
--- a/core/lspserver.py
+++ b/core/lspserver.py
@@ -709,7 +709,15 @@ class LspServer:
         if "method" in message and message["method"] == "textDocument/publishDiagnostics":
             filepath = uri_to_path(message["params"]["uri"])
             if self.enable_diagnostics and is_in_path_dict(self.files, filepath):
-                get_from_path_dict(self.files, filepath).record_diagnostics(message["params"]["diagnostics"], self.server_info["name"])
+                # filter message 'Type analysis indicates code is unreachable'
+                diagnostics = []
+                for diagnostic in message["params"]["diagnostics"]:
+                    if diagnostic["message"] != "Type analysis indicates code is unreachable":
+                        diagnostics.append(diagnostic)
+                    else:
+                        pass
+                        #print('drop ', diagnostic)
+                get_from_path_dict(self.files, filepath).record_diagnostics(diagnostics, self.server_info["name"])
 
     def handle_dart_publish_closing_labels(self, message):
         if "method" in message and message["method"] == "dart/textDocument/publishClosingLabels":
@@ -794,6 +802,14 @@ class LspServer:
             else:
                 if "method" not in message and message["id"] in self.request_dict:
                     handler = self.request_dict[message["id"]]
+                    if handler.method == 'textDocument/completion':
+                        for key  in self.files:
+                            fileaction = self.files[key]
+                            if message['id'] == fileaction.completion_request_ids:
+                                fileaction.completion_request_ids = -1
+                                #import time
+                                #print(fileaction, message['id'],
+                                      #time.time() - fileaction.completion_start_time)
                     handler.handle_response(
                         request_id=message["id"],
                         response=message["result"],
diff --git a/core/search_file_words.py b/core/search_file_words.py
index f47f14c..7e40e9f 100755
--- a/core/search_file_words.py
+++ b/core/search_file_words.py
@@ -80,7 +80,12 @@ class SearchFileWords:
             return
 
         if buffer_name in self.search_content_dict:
-            content = rebuild_content_from_diff(self.search_content_dict[buffer_name], start_pos, end_pos, change_text)
+            try:
+                content = rebuild_content_from_diff(self.search_content_dict[buffer_name], start_pos, end_pos, change_text)
+            except:
+                print('change_buffer error: buffer_name: {}, start_pos: {}, end_pos: {}, change_text: {}'.format(buffer_name, start_pos, end_pos, change_text))
+                return
+                #assert 0
         else:
             content = get_emacs_func_result('get-buffer-content', buffer_name, True)
 
@@ -103,7 +108,8 @@ class SearchFileWords:
     def search_words_from_files(self, prefix: str):
         try:
             all_words = set()
-            for file, words in self.files.items():
+            its = list(self.files.items())
+            for file, words in its:
                 all_words = all_words | words
 
             search_candidates = self.search_word(prefix, all_words)
@@ -145,12 +151,17 @@ class SearchFileWords:
                 else:
                     break
         else:
-            match_words = list(filter(lambda word: word.lower().startswith(prefix.lower()), all_words))
-            if prefix.isupper():
+            sprefix = prefix.split('.')[-1]
+            match_words = list(filter(lambda word: word.lower().startswith(sprefix.lower()), all_words))
+            candidates = []
+            if prefix.isupper() and '.' not in prefix:
                 candidates = list(map(lambda word: word.upper(), match_words))
             else:
-                candidates = list(map(lambda word: prefix + word[len(prefix):], match_words))
+                #candidates = list(map(lambda word: prefix + word[len(sprefix):], match_words))
+                candidates = list(map(lambda word: word, match_words))
+
             candidates.sort(key=len, reverse=False)
+
         return candidates
             
     def search_dispatcher(self):
diff --git a/core/utils.py b/core/utils.py
index 21e3774..046b889 100755
--- a/core/utils.py
+++ b/core/utils.py
@@ -58,7 +58,8 @@ test_interceptor = None
 
 # initialize logging, default to STDERR and INFO level
 logger = logging.getLogger("lsp-bridge")
-logger.setLevel(logging.INFO)
+#logger.setLevel(logging.INFO)
+logger.setLevel(logging.WARNING)
 logger.addHandler(logging.StreamHandler())
 
 
@@ -180,6 +181,9 @@ def eval_in_emacs(method_name, *args):
 
 def message_emacs(message: str):
     """Message to Emacs with prefix."""
+    if 'bash-language-server' in message and 'Error while parsing file' in message:
+        # ignore warning from bash-language-server
+        return
     eval_in_emacs("message", "[LSP-Bridge] " + message)
 
 
diff --git a/langserver/pyright-background-analysis.json b/langserver/pyright-background-analysis.json
index 06d7c3c..92fb9e2 100644
--- a/langserver/pyright-background-analysis.json
+++ b/langserver/pyright-background-analysis.json
@@ -11,7 +11,7 @@
       "autoImportCompletions": true,
       "typeshedPaths": [],
       "stubPath": "",
-      "useLibraryCodeForTypes": true,
+      "useLibraryCodeForTypes": false,
       "diagnosticMode": "openFilesOnly",
       "typeCheckingMode": "basic",
       "logLevel": "verbose",
diff --git a/lsp-bridge-diagnostic.el b/lsp-bridge-diagnostic.el
index de78491..0540031 100644
--- a/lsp-bridge-diagnostic.el
+++ b/lsp-bridge-diagnostic.el
@@ -170,7 +170,16 @@ You can set this value with `(2 3 4) if you just need render error diagnostic."
 
 (defvar lsp-bridge-diagnostic-display-error-at-point-timer nil)
 
-(autoload 'lsp-bridge--with-file-buffer "lsp-bridge")
+;;(autoload 'lsp-bridge--with-file-buffer "lsp-bridge")
+
+(cl-defmacro lsp-bridge--with-file-buffer (filename filehost &rest body)
+  "Evaluate BODY in buffer with FILEPATH."
+  (declare (indent 1))
+  `(when-let ((buffer (pcase filehost
+                        ("" (lsp-bridge-get-match-buffer-by-filepath ,filename))
+                        (_ (lsp-bridge-get-match-buffer-by-remote-file ,filehost ,filename)))))
+     (with-current-buffer buffer
+       ,@body)))
 
 (defun lsp-bridge-diagnostic-hide-tooltip ()
   (acm-frame-hide-frame lsp-bridge-diagnostic-frame))
@@ -270,15 +279,17 @@ You can set this value with `(2 3 4) if you just need render error diagnostic."
     ;; Show diagnostic tooltip.
     (with-current-buffer (get-buffer-create lsp-bridge-diagnostic-buffer)
       (erase-buffer)
-      (lsp-bridge-diagnostic-insert-colored-string (overlay-get diagnostic-overlay 'color) diagnostic-wrapped-message)
+      ;;(lsp-bridge-diagnostic-insert-colored-string (overlay-get diagnostic-overlay 'color) diagnostic-wrapped-message)
+      (insert (propertize diagnostic-display-message 'face 'flycheck-fringe-warning))
       (setq-local lsp-bridge-diagnostic-message diagnostic-message))
 
     (cond
      ((acm-frame-can-display-p)
       (acm-frame-new lsp-bridge-diagnostic-frame
                      lsp-bridge-diagnostic-buffer
-                     "lsp bridge diagnostic frame")
-
+                     "lsp bridge diagnostic frame"
+                     ;; zero margin
+                     nil nil nil 0)
       (set-face-background (acm-frame-border-face)
                            foreground-color
                            lsp-bridge-diagnostic-frame))
diff --git a/lsp-bridge.el b/lsp-bridge.el
index 18b2f97..9b2f821 100644
--- a/lsp-bridge.el
+++ b/lsp-bridge.el
@@ -1123,6 +1123,8 @@ So we build this macro to restore postion after code format."
             (lsp-bridge-enable-org-babel
              (lsp-bridge-org-babel-check-lsp-server)))))))
 
+(defvar-local lsp-bridge-has-lsp-server--p nil)
+(defvar-local lsp-bridge-has-lsp-server--p-set nil)
 (defun lsp-bridge-has-lsp-server-p ()
   (cond ((and lsp-bridge-enable-org-babel (eq major-mode 'org-mode))
          (setq-local acm-is-elisp-mode-in-org nil)
@@ -1327,7 +1329,7 @@ So we build this macro to restore postion after code format."
       (cond ((member this-command-string '("self-insert-command" "org-self-insert-command"))
              (setq this-command 'acm-filter-insert-char)
              (setq last-command 'acm-filter-insert-char))
-            ((member this-command-string '("delete-block-backward" "grammatical-edit-backward-delete"))
+            ((member this-command-string '("delete-block-backward" "grammatical-edit-backward-delete" "evil-delete-backward-char-and-join"))
              (setq this-command 'acm-filter-delete-char)
              (setq last-command 'acm-filter-delete-char))
             ))))
@@ -1336,9 +1338,9 @@ So we build this macro to restore postion after code format."
   (setq-local lsp-bridge-cursor-after-command (point))
 
   (let ((this-command-string (format "%s" this-command)))
-    (when (and lsp-bridge-mode
-               (member this-command-string '("self-insert-command" "org-self-insert-command" "lsp-bridge-popup-complete-menu")))
-      (lsp-bridge-try-completion))
+    ;;(when (and lsp-bridge-mode
+               ;;(member this-command-string '("self-insert-command" "org-self-insert-command" "lsp-bridge-popup-complete-menu")))
+      ;;(lsp-bridge-try-completion))
 
     (when (lsp-bridge-has-lsp-server-p)
       (unless (equal lsp-bridge-last-cursor-position
@@ -1410,29 +1412,34 @@ So we build this macro to restore postion after code format."
                                             server-names)
   ;; Adjust `gc-cons-threshold' to maximize temporary,
   ;; make sure Emacs not do GC
-  (let ((gc-cons-threshold most-positive-fixnum))
-    (lsp-bridge--with-file-buffer filename filehost
-                                  ;; Save completion items.
-                                  (setq-local acm-backend-lsp-cache-candidates nil)
-                                  (setq-local acm-backend-lsp-completion-position position)
-                                  (setq-local acm-backend-lsp-completion-trigger-characters completion-trigger-characters)
-                                  (setq-local acm-backend-lsp-server-names server-names)
-                                  (setq-local acm-backend-lsp-fetch-completion-item-ticker nil)
 
-                                  (let* ((lsp-items acm-backend-lsp-items)
-                                         (completion-table (make-hash-table :test 'equal)))
-                                    (dolist (item candidates)
-                                      (plist-put item :annotation (capitalize (plist-get item :icon)))
-                                      (puthash (plist-get item :key) item completion-table))
-                                    (puthash server-name completion-table lsp-items)
-                                    (setq-local acm-backend-lsp-items lsp-items))
-                                  (lsp-bridge-try-completion))))
+  (let ((gc-cons-threshold most-positive-fixnum))
+  ;; avoid completion when cursor move in org
+    (when (or (not (eq major-mode 'org-mode))
+              (eq (plist-get (lsp-bridge--point-position (point)) :character)
+                  (plist-get position :character)))
+      (lsp-bridge--with-file-buffer filename filehost
+                                    ;; Save completion items.
+                                    (setq-local acm-backend-lsp-cache-candidates nil)
+                                    (setq-local acm-backend-lsp-completion-position position)
+                                    (setq-local acm-backend-lsp-completion-trigger-characters completion-trigger-characters)
+                                    (setq-local acm-backend-lsp-server-names server-names)
+                                    (setq-local acm-backend-lsp-fetch-completion-item-ticker nil)
+                                    (let* ((lsp-items acm-backend-lsp-items)
+                                           (completion-table (make-hash-table :test 'equal)))
+                                      (dolist (item candidates)
+                                        (plist-put item :annotation (capitalize (plist-get item :icon)))
+                                        (puthash (plist-get item :key) item completion-table))
+                                      (puthash server-name completion-table lsp-items)
+                                      (setq-local acm-backend-lsp-items lsp-items))
+                                    (lsp-bridge-try-completion)))))
 
 (defun lsp-bridge-completion-workspace-symbol--record-items (filename
                                                              filehost
                                                              candidates
                                                              server-name
                                                              server-names)
+
   ;; Adjust `gc-cons-threshold' to maximize temporary,
   ;; make sure Emacs not do GC
   (let ((gc-cons-threshold most-positive-fixnum))
@@ -1448,7 +1455,7 @@ So we build this macro to restore postion after code format."
                                       (puthash (plist-get item :key) item completion-table))
                                     (puthash server-name completion-table lsp-items)
                                     (setq-local acm-backend-lsp-workspace-symbol-items lsp-items))
-                                  (lsp-bridge-try-completion))))
+                                  (lsp-bridge-try-completion t))))
 
 (defun lsp-bridge-check-predicate (pred current-function)
   (if (functionp pred)
@@ -1463,9 +1470,12 @@ So we build this macro to restore postion after code format."
         result)
     t))
 
-(defun lsp-bridge-try-completion ()
+(defun lsp-bridge-try-completion (&optional delay-update)
+  ;; (message "[LSP-Bridge] lsp-bridge-try-completion %s %s" lsp-bridge-prohibit-completion lsp-bridge-last-change-command)
   (cond (lsp-bridge-prohibit-completion
-         (setq-local lsp-bridge-prohibit-completion nil))
+         ;; some times it will call multiple times, so we need reset `lsp-bridge-prohibit-completion' to nil.
+         (unless (eq lsp-bridge-prohibit-last-command lsp-bridge-last-change-command)
+           (setq-local lsp-bridge-prohibit-completion nil)))
         (t
          ;; Don't popup completion menu when `lsp-bridge-last-change-position' (cursor before send completion request) is not equal current cursor position.
          (when (equal lsp-bridge-last-change-position
@@ -1476,7 +1486,8 @@ So we build this macro to restore postion after code format."
                          lsp-bridge-completion-popup-predicates)
                (progn
                  (acm-template-candidate-init)
-                 (acm-update)
+                 (unless delay-update
+                     (acm-update))
 
                  ;; We need reset `lsp-bridge-manual-complete-flag' if completion menu popup by `lsp-bridge-popup-complete-menu'.
                  (when lsp-bridge-complete-manually
@@ -1690,6 +1701,9 @@ So we build this macro to restore postion after code format."
   ;; `lsp-bridge-try-completion'.
   (lsp-bridge-record-last-change-position))
 
+(defvar-local lsp-org-babel-save-current--point nil)
+(defvar lsp-bridge-prohibit-last-command nil)
+
 (defun lsp-bridge-monitor-after-change (begin end length)
   ;; Nothing change actual if `begin' and `end' equal `lsp-bridge--before-change-begin-point' and `lsp-bridge--before-change-end-point'
   ;; Then we should not send any request to search backend.
@@ -1727,18 +1741,40 @@ So we build this macro to restore postion after code format."
               ;;                  ))
 
               ;; Send change_file request to trigger LSP completion.
-              (lsp-bridge-call-file-api "change_file"
-                                        lsp-bridge--before-change-begin-pos
-                                        lsp-bridge--before-change-end-pos
-                                        length
-                                        change-text
-                                        (lsp-bridge--position)
-                                        (acm-char-before)
-                                        (buffer-name)
-                                        (acm-get-input-prefix))
-
+              (when-let ((pos (lsp-bridge--position))
+                         (ok (or (lsp-bridge-call-file-api-p)
+                                 (lsp-bridge-is-remote-file))))
+                ;; patch for org babel
+                (when (and (member this-command '(+org/return evil-org-open-below))
+                           (not (eq (plist-get lsp-bridge--before-change-begin-pos :line)
+                                    (plist-get lsp-bridge--before-change-end-pos :line)))
+                           lsp-org-babel-save-current--point
+                           (> length 1))
+                  (setq end lsp-org-babel-save-current--point)
+                  (setq begin lsp-org-babel-save-current--point)
+                  (setq length 0)
+                  (save-excursion
+                    (goto-char lsp-org-babel-save-current--point)
+                    (forward-line)
+                    (setq end (eol)))
+                  (setq lsp-bridge--before-change-begin-pos (lsp-bridge--point-position begin))
+                  (setq lsp-bridge--before-change-end-pos (lsp-bridge--point-position begin))
+                  (setq pos (lsp-bridge--point-position end)))
+
+                ;; Send change_file request to trigger LSP completion.
+                (lsp-bridge-call-file-api "change_file"
+                                          lsp-bridge--before-change-begin-pos
+                                          lsp-bridge--before-change-end-pos
+                                          length
+                                          change-text
+                                          pos
+                                          (acm-char-before)
+                                          (buffer-name)
+                                          (acm-get-input-prefix)))
+              
               ;; Send inlay hint request.
-              (lsp-bridge-inlay-hint-try-send-request))
+              (lsp-bridge-try-send-inlay-hint-request))
+
 
             ;; Complete other non-LSP backends.
             (lsp-bridge-complete-other-backends)
@@ -1750,6 +1786,10 @@ So we build this macro to restore postion after code format."
              change-text)
             ))))))
 
+(defun lsp-bridge-try-send-inlay-hint-request ()
+  (when lsp-bridge-enable-inlay-hint
+    (lsp-bridge-inlay-hint)))
+
 (defun lsp-bridge-complete-other-backends ()
   (let* ((this-command-string (format "%s" this-command))
          (current-word (thing-at-point 'word t))
@@ -2836,11 +2876,14 @@ We need exclude `markdown-code-fontification:*' buffer in `lsp-bridge-monitor-be
 (defun lsp-bridge-search-backend--record-items (backend-name items)
   ;; Adjust `gc-cons-threshold' to maximize temporary,
   ;; make sure Emacs not do GC
-  (let ((gc-cons-threshold most-positive-fixnum))
+  (let ((gc-cons-threshold most-positive-fixnum)
+        (not-update-acm (and (lsp-bridge-has-lsp-server-p)
+                             (not (member backend-name '("codeium"))))))
     (set (make-local-variable (intern (format "acm-backend-%s-items" backend-name))) items)
     (set (make-local-variable (intern (format "acm-backend-%s-cache-candiates" backend-name))) nil)
 
-    (lsp-bridge-try-completion)))
+    ;; delay update if we in lsp-bridge-mode
+    (lsp-bridge-try-completion not-update-acm)))
 
 ;;; support which-func-mode
 ;;;
diff --git a/lsp_bridge.py b/lsp_bridge.py
index 68e14ae..2f3fd4f 100755
--- a/lsp_bridge.py
+++ b/lsp_bridge.py
@@ -912,6 +912,9 @@ class LspBridge:
             if is_remote_path(filepath):
                 return
             open_file_success = True
+            if filepath == '/Users/royokong/.org/roam/.org-src-babel':
+                print('skip org src babel')
+                return
 
             if not is_in_path_dict(FILE_ACTION_DICT, filepath):
                 open_file_success = self.open_file(filepath)  # _do is called inside event_loop, so we can block here.
@@ -1028,12 +1031,15 @@ def read_lang_server_info(lang_server_path):
 
 def load_single_server_info(lang_server):
     lang_server_info_path = ""
-    if isinstance(lang_server, str) and os.path.exists(lang_server) and os.path.dirname(lang_server) != "":
-        # If lang_server is real file path, we load the LSP server configuration from the user specified file.
-        lang_server_info_path = lang_server
-    else:
-        # Otherwise, we load LSP server configuration from file lsp-bridge/langserver/lang_server.json.
-        lang_server_info_path = get_lang_server_path(lang_server)
+    try:
+        if isinstance(lang_server, str) and os.path.exists(lang_server) and os.path.dirname(lang_server) != "":
+            # If lang_server is real file path, we load the LSP server configuration from the user specified file.
+            lang_server_info_path = lang_server
+        else:
+            # Otherwise, we load LSP server configuration from file lsp-bridge/langserver/lang_server.json.
+            lang_server_info_path = get_lang_server_path(lang_server)
+    except TypeError:
+        print(f'{lang_server} is error in load_single_server_info')
 
     with open(lang_server_info_path, encoding="utf-8", errors="ignore") as f:
         return read_lang_server_info(f)
diff --git a/multiserver/pyright-background-analysis_ruff.json b/multiserver/pyright-background-analysis_ruff.json
index 73efc97..96dedd6 100644
--- a/multiserver/pyright-background-analysis_ruff.json
+++ b/multiserver/pyright-background-analysis_ruff.json
@@ -1,8 +1,8 @@
 {
   "completion": ["pyright-background-analysis"],
   "completion_item_resolve": ["pyright-background-analysis"],
-  "diagnostics": ["ruff"],
-  "code_action": ["ruff"],
+  "diagnostics": ["pyright", "ruff"],
+  "code_action": ["pyright", "ruff"],
   "execute_command": ["pyright-background-analysis", "ruff"],
   "find_define": "pyright-background-analysis",
   "find_type_define": "pyright-background-analysis",
