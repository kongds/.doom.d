diff --git a/acm/acm.el b/acm/acm.el
index 33bccf4..816df00 100644
--- a/acm/acm.el
+++ b/acm/acm.el
@@ -719,7 +719,7 @@ The key of candidate will change between two LSP results."
                         (+ cursor-y offset-y))))
     (acm-frame-set-frame-position acm-menu-frame acm-frame-x acm-frame-y)))
 
-(defun acm-doc-try-show (&optional update-completion-item)
+(defun acm-doc-try-show2 (&optional update-completion-item)
   (when acm-enable-doc
     (let* ((candidate (acm-menu-current-candidate))
            (backend (plist-get candidate :backend))
@@ -762,6 +762,19 @@ The key of candidate will change between two LSP results."
           ;; Hide doc frame immediately if backend is not LSP.
           (_ (acm-doc-hide)))))))
 
+(defvar acm-doc-show-timer nil)
+(defvar acm-doc-show-delay 0.5)
+
+(defun acm-doc-try-show (&optional update-completion-item)
+  "Show doc frame."
+  (acm-doc-hide)
+  (acm-cancel-timer acm-doc-show-timer)
+  (setq acm-doc-show-timer
+        (run-with-idle-timer acm-doc-show-delay nil
+                             (lambda ()
+                               (if (frame-visible-p acm-menu-frame)
+                                   (acm-doc-try-show2 update-completion-item))))))
+
 (defun acm-doc-frame-adjust ()
   (let* ((emacs-width (frame-pixel-width))
          (emacs-height (frame-pixel-height))
diff --git a/core/search_file_words.py b/core/search_file_words.py
index b8e74ff..3823723 100755
--- a/core/search_file_words.py
+++ b/core/search_file_words.py
@@ -85,7 +85,9 @@ class SearchFileWords:
             all_words = set()
             for file, words in self.files.items():
                 all_words = all_words | words
-                
+
+            prefix = prefix.split('.')[-1]
+
             search_candidates = self.search_word(prefix, all_words)
             candidates = []
             if len(search_candidates) > 0:
diff --git a/lsp-bridge-diagnostic.el b/lsp-bridge-diagnostic.el
index d3027cf..5926b51 100644
--- a/lsp-bridge-diagnostic.el
+++ b/lsp-bridge-diagnostic.el
@@ -158,7 +158,14 @@ You can set this value with `(2 3 4) if you just need render error diagnostic."
 (autoload 'lsp-bridge--with-file-buffer "lsp-bridge")
 
 (defun lsp-bridge-diagnostic-hide-tooltip ()
-  (posframe-hide lsp-bridge-diagnostic-tooltip))
+  (acm-frame-hide-frame lsp-bridge-diagnostic-frame))
+
+(cl-defmacro lsp-bridge--with-file-buffer (filepath &rest body)
+  "Evaluate BODY in buffer with FILEPATH."
+  (declare (indent 1))
+  `(when-let ((buffer (lsp-bridge-get-match-buffer ,filepath)))
+     (with-current-buffer buffer
+       ,@body)))
 
 (defun lsp-bridge-diagnostic--render (filepath diagnostics)
   (lsp-bridge--with-file-buffer filepath
@@ -200,7 +207,7 @@ You can set this value with `(2 3 4) if you just need render error diagnostic."
 (defun lsp-bridge-diagnostic-show-tooltip (diagnostic-overlay &optional goto-beginning)
   (let* ((diagnostic-display-message (overlay-get diagnostic-overlay 'display-message))
          (diagnostic-message (overlay-get diagnostic-overlay 'message))
-         (foreground-color (plist-get (face-attribute (overlay-get diagnostic-overlay 'face) :underline) :color)))
+         (cursor (acm-frame-get-popup-position (point))))
     ;; weather goto beginning of diagnostic
     (when goto-beginning
       (goto-char (overlay-start diagnostic-overlay)))
@@ -212,16 +219,11 @@ You can set this value with `(2 3 4) if you just need render error diagnostic."
 
     (cond
      ((posframe-workable-p) ;; Perform redisplay make sure posframe can poup to
-      ;; Perform redisplay make sure posframe can poup to
-      (redisplay 'force)
-      (sleep-for 0.01)
-      (setq lsp-bridge-diagnostic-frame
-            (posframe-show lsp-bridge-diagnostic-tooltip
-                           :position (point)
-                           :internal-border-width lsp-bridge-diagnostic-tooltip-border-width
-                           :background-color (acm-frame-background-color)
-                           :foreground-color foreground-color
-                           )))
+      (acm-frame-create-frame-if-not-exist  lsp-bridge-diagnostic-frame lsp-bridge-diagnostic-tooltip
+                                            "lsp bridge diagnostic tooltip" 0 t)
+      (acm-frame-set-frame-position lsp-bridge-diagnostic-frame
+                                    (car cursor) (+ (cdr cursor) (line-pixel-height)))
+      (acm-frame-set-frame-max-size lsp-bridge-diagnostic-frame))
      (t (message diagnostic-message)))))
 
 (defun lsp-bridge-diagnostic-maybe-display-error-at-point ()
@@ -266,11 +268,10 @@ You can set this value with `(2 3 4) if you just need render error diagnostic."
     (message "[LSP-Bridge] Reach first diagnostic.")))
 
 (defun lsp-bridge-diagnostic-overlay-at-point ()
-  (cl-dolist (overlay lsp-bridge-diagnostic-overlays)
-    (when (and (>= (point) (overlay-start overlay))
+  (cl-loop for overlay in lsp-bridge-diagnostic-overlays
+    do (when (and (>= (point) (overlay-start overlay))
                (< (point) (overlay-end overlay)))
-      (cl-return overlay)
-      )))
+      (cl-return overlay))))
 
 (defun lsp-bridge-diagnostic-copy ()
   (interactive)
diff --git a/lsp-bridge.el b/lsp-bridge.el
index e142cac..734d01e 100644
--- a/lsp-bridge.el
+++ b/lsp-bridge.el
@@ -596,13 +596,6 @@ you can customize `lsp-bridge-get-workspace-folder' to return workspace folder p
   (or (alist-get mode lsp-bridge-formatting-indent-alist)
       (lsp-bridge--get-indent-width (or (get mode 'derived-mode-parent) 'default))))
 
-(cl-defmacro lsp-bridge--with-file-buffer (dirname &rest body)
-  "Evaluate BODY in buffer with FILEPATH."
-  (declare (indent 1))
-  `(when-let ((buffer (lsp-bridge-get-match-buffer ,dirname)))
-     (with-current-buffer buffer
-       ,@body)))
-
 (cl-defmacro lsp-bridge-save-position (&rest body)
   "`save-excursion' not enough for LSP code format.
 So we build this macro to restore postion after code format."
@@ -732,18 +725,24 @@ So we build this macro to restore postion after code format."
             (lsp-bridge-use-ds-pinyin-in-org-mode
              "ds-pinyin"))))))
 
+(defvar-local lsp-bridge-has-lsp-server--p nil)
+(defvar-local lsp-bridge-has-lsp-server--p-set nil)
 (defun lsp-bridge-has-lsp-server-p ()
-  (when-let* ((dirname (ignore-errors (file-truename buffer-file-name))))
-    (let* ((multi-lang-server-by-extension (or (lsp-bridge-get-multi-lang-server-by-extension dirname)
-                                               (lsp-bridge--with-file-buffer dirname
-                                                 (lsp-bridge-get-multi-lang-server-by-mode))))
-           (lang-server-by-extension (or (lsp-bridge-get-single-lang-server-by-extension dirname)
-                                         (lsp-bridge--with-file-buffer dirname
-                                           (lsp-bridge-get-single-lang-server-by-mode)))))
-      (if multi-lang-server-by-extension
-          multi-lang-server-by-extension
-        lang-server-by-extension)
-      )))
+  (if lsp-bridge-has-lsp-server--p-set
+      lsp-bridge-has-lsp-server--p
+    (setq-local lsp-bridge-has-lsp-server--p
+                (when-let* ((dirname (ignore-errors (file-truename buffer-file-name))))
+                  (let* ((multi-lang-server-by-extension (or (lsp-bridge-get-multi-lang-server-by-extension dirname)
+                                                             (lsp-bridge--with-file-buffer dirname
+                                                               (lsp-bridge-get-multi-lang-server-by-mode))))
+                         (lang-server-by-extension (or (lsp-bridge-get-single-lang-server-by-extension dirname)
+                                                       (lsp-bridge--with-file-buffer dirname
+                                                         (lsp-bridge-get-single-lang-server-by-mode)))))
+                    (if multi-lang-server-by-extension
+                        multi-lang-server-by-extension
+                      lang-server-by-extension)
+                    ))
+                lsp-bridge-has-lsp-server--p-set t)))
 
 (defun lsp-bridge-call-async (method &rest args)
   "Call Python EPC function METHOD and ARGS asynchronously."
@@ -885,7 +884,7 @@ So we build this macro to restore postion after code format."
       (cond ((member this-command-string '("self-insert-command" "org-self-insert-command"))
              (setq this-command 'acm-filter-insert-char)
              (setq last-command 'acm-filter-insert-char))
-            ((member this-command-string '("delete-block-backward" "grammatical-edit-backward-delete"))
+            ((member this-command-string '("delete-block-backward" "grammatical-edit-backward-delete" "evil-delete-backward-char-and-join"))
              (setq this-command 'acm-filter-delete-char)
              (setq last-command 'acm-filter-delete-char))
             ))))
@@ -1131,6 +1130,9 @@ So we build this macro to restore postion after code format."
       ;; Record last command to `lsp-bridge-last-change-command'.
       (setq lsp-bridge-last-change-command (format "%s" this-command))
 
+      (if (member this-command-string '("evil-delete-backward-char-and-join"))
+          (setq-local lsp-bridge-prohibit-completion t))
+
       ;; Record last change position to avoid popup outdate completions.
       (setq lsp-bridge-last-change-position (list (current-buffer) (buffer-chars-modified-tick) (point)))
 
@@ -1555,12 +1557,14 @@ So we build this macro to restore postion after code format."
   (when-let* ((lsp-server-name (lsp-bridge-has-lsp-server-p)))
     ;; When user open buffer by `ido-find-file', lsp-bridge will throw `FileNotFoundError' error.
     ;; So we need save buffer to disk before enable `lsp-bridge-mode'.
-    (unless (file-exists-p (buffer-file-name))
+    (unless (and (buffer-file-name) (file-exists-p (buffer-file-name)))
       (save-buffer))
 
     (setq-local acm-backend-lsp-completion-trigger-characters nil)
     (setq-local acm-backend-lsp-completion-position nil)
-    (setq-local acm-backend-lsp-filepath (file-truename buffer-file-name))
+    (if buffer-file-name
+        (setq-local acm-backend-lsp-filepath (file-truename buffer-file-name))
+      (setq-local acm-backend-lsp-filepath "/Users/royokong/temp"))
     (setq-local acm-backend-lsp-items (make-hash-table :test 'equal))
     (setq-local acm-backend-lsp-server-names nil)
 
