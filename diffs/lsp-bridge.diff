diff --git a/acm/acm.el b/acm/acm.el
index 0383973..5c42847 100644
--- a/acm/acm.el
+++ b/acm/acm.el
@@ -742,7 +742,7 @@ The key of candidate will change between two LSP results."
                         (+ cursor-y offset-y))))
     (acm-frame-set-frame-position acm-menu-frame acm-frame-x acm-frame-y)))
 
-(defun acm-doc-try-show (&optional update-completion-item)
+(defun acm-doc-try-show2 (&optional update-completion-item)
   (when acm-enable-doc
     (let* ((candidate (acm-menu-current-candidate))
            (backend (plist-get candidate :backend))
@@ -786,6 +786,19 @@ The key of candidate will change between two LSP results."
           ;; Hide doc frame immediately if backend is not LSP.
           (_ (acm-doc-hide)))))))
 
+(defvar acm-doc-show-timer nil)
+(defvar acm-doc-show-delay 0.5)
+
+(defun acm-doc-try-show (&optional update-completion-item)
+  "Show doc frame."
+  (acm-doc-hide)
+  (acm-cancel-timer acm-doc-show-timer)
+  (setq acm-doc-show-timer
+        (run-with-idle-timer acm-doc-show-delay nil
+                             (lambda ()
+                               (if (frame-visible-p acm-menu-frame)
+                                   (acm-doc-try-show2 update-completion-item))))))
+
 (defun acm-doc-frame-adjust ()
   (let* ((emacs-width (frame-pixel-width))
          (emacs-height (frame-pixel-height))
diff --git a/core/fileaction.py b/core/fileaction.py
index 2e53632..dfe6bec 100755
--- a/core/fileaction.py
+++ b/core/fileaction.py
@@ -198,7 +198,7 @@ class FileAction:
         self.last_change_file_time = time.time()
 
         # Send textDocument/completion 100ms later.
-        self.try_completion_timer = threading.Timer(0.1, lambda : self.try_completion(position, before_char, prefix))
+        self.try_completion_timer = threading.Timer(0.01, lambda : self.try_completion(position, before_char, prefix))
         self.try_completion_timer.start()
         
     def update_file(self, buffer_name):
@@ -355,7 +355,12 @@ class FileAction:
     def rename_file(self, old_filepath, new_filepath):
         self.get_lsp_servers()[0].send_did_rename_files_notification(old_filepath, new_filepath)
 
+    completion_request_ids = -1
     def send_server_request(self, lsp_server, handler_name, *args, **kwargs):
+        if self.completion_request_ids > 0 and handler_name == "completion":
+            # Drop completion request if previous completion request is not finished.
+            return
+
         handler: Handler = self.method_handlers[lsp_server.server_info["name"]][handler_name]
         
         handler.latest_request_id = request_id = generate_request_id()
@@ -371,7 +376,10 @@ class FileAction:
             method=handler.method,
             params=params,
             request_id=request_id)
-        
+        if handler_name == "completion":
+            self.completion_request_ids = request_id
+            self.completion_start_time = time.time()
+
     def exit(self):
         for lsp_server in (self.org_lang_servers.values() if self.org_file else self.get_lsp_servers()):
             if lsp_server.server_name in LSP_SERVER_DICT:
diff --git a/core/lspserver.py b/core/lspserver.py
index a9e87f3..78f3ea5 100755
--- a/core/lspserver.py
+++ b/core/lspserver.py
@@ -618,6 +618,14 @@ class LspServer:
             else:
                 if "method" not in message and message["id"] in self.request_dict:
                     handler = self.request_dict[message["id"]]
+                    # if handler.method == 'textDocument/completion':
+                    #     for key  in self.files:
+                    #         fileaction = self.files[key]
+                    #         if message['id'] == fileaction.completion_request_ids:
+                    #             import time
+                    #             fileaction.completion_request_ids = -1
+                    #             print(fileaction, message['id'],
+                    #                   time.time() - fileaction.completion_start_time)
                     handler.handle_response(
                         request_id=message["id"],
                         response=message["result"],
diff --git a/core/search_file_words.py b/core/search_file_words.py
index b8e74ff..91d4eaa 100755
--- a/core/search_file_words.py
+++ b/core/search_file_words.py
@@ -85,7 +85,7 @@ class SearchFileWords:
             all_words = set()
             for file, words in self.files.items():
                 all_words = all_words | words
-                
+
             search_candidates = self.search_word(prefix, all_words)
             candidates = []
             if len(search_candidates) > 0:
@@ -107,12 +107,14 @@ class SearchFileWords:
             logger.error(traceback.format_exc())
             
     def search_word(self, prefix, all_words):
-        match_words = list(filter(lambda word: word.lower().startswith(prefix.lower()), all_words))
+
+        sprefix = prefix.split('.')[-1]
+        match_words = list(filter(lambda word: word.lower().startswith(sprefix.lower()), all_words))
         candidates = []
-        if prefix.isupper():
+        if prefix.isupper() and '.' not in prefix:
             candidates = list(map(lambda word: word.upper(), match_words))
         else:
-            candidates = list(map(lambda word: prefix + word[len(prefix):], match_words))
+            candidates = list(map(lambda word: prefix + word[len(sprefix):], match_words))
             
         candidates.sort(key=len, reverse=False)
         
diff --git a/langserver/pyright-background-analysis.json b/langserver/pyright-background-analysis.json
index 9444e0c..c3962be 100644
--- a/langserver/pyright-background-analysis.json
+++ b/langserver/pyright-background-analysis.json
@@ -12,7 +12,7 @@
       "autoImportCompletions": true,
       "typeshedPaths": [],
       "stubPath": "",
-      "useLibraryCodeForTypes": true,
+      "useLibraryCodeForTypes": false,
       "diagnosticMode": "openFilesOnly",
       "typeCheckingMode": "basic",
       "logLevel": "verbose",
diff --git a/lsp-bridge-diagnostic.el b/lsp-bridge-diagnostic.el
index d3027cf..5926b51 100644
--- a/lsp-bridge-diagnostic.el
+++ b/lsp-bridge-diagnostic.el
@@ -158,7 +158,14 @@ You can set this value with `(2 3 4) if you just need render error diagnostic."
 (autoload 'lsp-bridge--with-file-buffer "lsp-bridge")
 
 (defun lsp-bridge-diagnostic-hide-tooltip ()
-  (posframe-hide lsp-bridge-diagnostic-tooltip))
+  (acm-frame-hide-frame lsp-bridge-diagnostic-frame))
+
+(cl-defmacro lsp-bridge--with-file-buffer (filepath &rest body)
+  "Evaluate BODY in buffer with FILEPATH."
+  (declare (indent 1))
+  `(when-let ((buffer (lsp-bridge-get-match-buffer ,filepath)))
+     (with-current-buffer buffer
+       ,@body)))
 
 (defun lsp-bridge-diagnostic--render (filepath diagnostics)
   (lsp-bridge--with-file-buffer filepath
@@ -200,7 +207,7 @@ You can set this value with `(2 3 4) if you just need render error diagnostic."
 (defun lsp-bridge-diagnostic-show-tooltip (diagnostic-overlay &optional goto-beginning)
   (let* ((diagnostic-display-message (overlay-get diagnostic-overlay 'display-message))
          (diagnostic-message (overlay-get diagnostic-overlay 'message))
-         (foreground-color (plist-get (face-attribute (overlay-get diagnostic-overlay 'face) :underline) :color)))
+         (cursor (acm-frame-get-popup-position (point))))
     ;; weather goto beginning of diagnostic
     (when goto-beginning
       (goto-char (overlay-start diagnostic-overlay)))
@@ -212,16 +219,11 @@ You can set this value with `(2 3 4) if you just need render error diagnostic."
 
     (cond
      ((posframe-workable-p) ;; Perform redisplay make sure posframe can poup to
-      ;; Perform redisplay make sure posframe can poup to
-      (redisplay 'force)
-      (sleep-for 0.01)
-      (setq lsp-bridge-diagnostic-frame
-            (posframe-show lsp-bridge-diagnostic-tooltip
-                           :position (point)
-                           :internal-border-width lsp-bridge-diagnostic-tooltip-border-width
-                           :background-color (acm-frame-background-color)
-                           :foreground-color foreground-color
-                           )))
+      (acm-frame-create-frame-if-not-exist  lsp-bridge-diagnostic-frame lsp-bridge-diagnostic-tooltip
+                                            "lsp bridge diagnostic tooltip" 0 t)
+      (acm-frame-set-frame-position lsp-bridge-diagnostic-frame
+                                    (car cursor) (+ (cdr cursor) (line-pixel-height)))
+      (acm-frame-set-frame-max-size lsp-bridge-diagnostic-frame))
      (t (message diagnostic-message)))))
 
 (defun lsp-bridge-diagnostic-maybe-display-error-at-point ()
@@ -266,11 +268,10 @@ You can set this value with `(2 3 4) if you just need render error diagnostic."
     (message "[LSP-Bridge] Reach first diagnostic.")))
 
 (defun lsp-bridge-diagnostic-overlay-at-point ()
-  (cl-dolist (overlay lsp-bridge-diagnostic-overlays)
-    (when (and (>= (point) (overlay-start overlay))
+  (cl-loop for overlay in lsp-bridge-diagnostic-overlays
+    do (when (and (>= (point) (overlay-start overlay))
                (< (point) (overlay-end overlay)))
-      (cl-return overlay)
-      )))
+      (cl-return overlay))))
 
 (defun lsp-bridge-diagnostic-copy ()
   (interactive)
diff --git a/lsp-bridge.el b/lsp-bridge.el
index 0955c91..4099844 100644
--- a/lsp-bridge.el
+++ b/lsp-bridge.el
@@ -601,13 +601,6 @@ you can customize `lsp-bridge-get-workspace-folder' to return workspace folder p
   (or (alist-get mode lsp-bridge-formatting-indent-alist)
       (lsp-bridge--get-indent-width (or (get mode 'derived-mode-parent) 'default))))
 
-(cl-defmacro lsp-bridge--with-file-buffer (dirname &rest body)
-  "Evaluate BODY in buffer with FILEPATH."
-  (declare (indent 1))
-  `(when-let ((buffer (lsp-bridge-get-match-buffer ,dirname)))
-     (with-current-buffer buffer
-       ,@body)))
-
 (cl-defmacro lsp-bridge-save-position (&rest body)
   "`save-excursion' not enough for LSP code format.
 So we build this macro to restore postion after code format."
@@ -749,26 +742,31 @@ So we build this macro to restore postion after code format."
                    (setq-local acm-is-elisp-mode-in-org t))
                (lsp-bridge-get-single-lang-server-by-mode))))))))
 
+(defvar-local lsp-bridge-has-lsp-server--p nil)
+(defvar-local lsp-bridge-has-lsp-server--p-set nil)
 (defun lsp-bridge-has-lsp-server-p ()
   (cond ((and lsp-bridge-enable-org-babel (eq major-mode 'org-mode))
          (setq-local acm-is-elisp-mode-in-org nil)
-         (and (org-babel-when-in-src-block)
+         (and (org-babel-get-src-block-info)
               ;; not send change-file for begin_src and end_src
               (not (string-match-p "^[[:space:]]*#\\+"
-                              (buffer-substring-no-properties (point-at-bol) (point-at-eol))))
+                                   (buffer-substring-no-properties (point-at-bol) (point-at-eol))))
               (lsp-bridge-get-single-lang-server-by-mode)))
         (t
-         (when-let* ((dirname (ignore-errors (file-truename buffer-file-name))))
-           (let* ((multi-lang-server-by-extension (or (lsp-bridge-get-multi-lang-server-by-extension dirname)
-                                                      (lsp-bridge--with-file-buffer dirname
-                                                        (lsp-bridge-get-multi-lang-server-by-mode))))
-                  (lang-server-by-extension (or (lsp-bridge-get-single-lang-server-by-extension dirname)
-                                                (lsp-bridge--with-file-buffer dirname
-                                                  (lsp-bridge-get-single-lang-server-by-mode)))))
-             (if multi-lang-server-by-extension
-                 multi-lang-server-by-extension
-               lang-server-by-extension)
-             )))))
+         (if lsp-bridge-has-lsp-server--p-set
+             lsp-bridge-has-lsp-server--p
+           (setq-local lsp-bridge-has-lsp-server--p
+                       (when-let* ((dirname (ignore-errors (file-truename buffer-file-name))))
+                         (let* ((multi-lang-server-by-extension (or (lsp-bridge-get-multi-lang-server-by-extension dirname)
+                                                                    (lsp-bridge--with-file-buffer dirname
+                                                                      (lsp-bridge-get-multi-lang-server-by-mode))))
+                                (lang-server-by-extension (or (lsp-bridge-get-single-lang-server-by-extension dirname)
+                                                              (lsp-bridge--with-file-buffer dirname
+                                                                (lsp-bridge-get-single-lang-server-by-mode)))))
+                           (if multi-lang-server-by-extension
+                               multi-lang-server-by-extension
+                             lang-server-by-extension)))
+                       lsp-bridge-has-lsp-server--p-set t)))))
 
 (defun lsp-bridge-call-async (method &rest args)
   "Call Python EPC function METHOD and ARGS asynchronously."
@@ -910,7 +908,7 @@ So we build this macro to restore postion after code format."
       (cond ((member this-command-string '("self-insert-command" "org-self-insert-command"))
              (setq this-command 'acm-filter-insert-char)
              (setq last-command 'acm-filter-insert-char))
-            ((member this-command-string '("delete-block-backward" "grammatical-edit-backward-delete"))
+            ((member this-command-string '("delete-block-backward" "grammatical-edit-backward-delete" "evil-delete-backward-char-and-join"))
              (setq this-command 'acm-filter-delete-char)
              (setq last-command 'acm-filter-delete-char))
             ))))
@@ -1156,6 +1154,9 @@ So we build this macro to restore postion after code format."
       ;; Record last command to `lsp-bridge-last-change-command'.
       (setq lsp-bridge-last-change-command (format "%s" this-command))
 
+      (if (member this-command-string '("evil-delete-backward-char-and-join"))
+          (setq-local lsp-bridge-prohibit-completion t))
+
       ;; Record last change position to avoid popup outdate completions.
       (setq lsp-bridge-last-change-position (list (current-buffer) (buffer-chars-modified-tick) (point)))
 
@@ -1268,12 +1269,20 @@ So we build this macro to restore postion after code format."
                            (base64-encode-string (encode-coding-string (buffer-string) 'utf-8))
                            )))
 
+(defvar-local lsp-bridge-file-last-size nil)
 (defun lsp-bridge-search-words-rebuild-cache ()
   "Rebuild words cache when idle."
   (when (lsp-bridge-epc-live-p lsp-bridge-epc-process)
     ;; Update file search words when idle.
     (lsp-bridge-search-words-update)
 
+    ;; Sync file when idle to avoid file not correctly updated in lsp server.
+    (when (and (lsp-bridge-call-file-api-p)
+               (not (eq major-mode 'org-mode))
+               (not (eq lsp-bridge-file-last-size (buffer-size))))
+      (setq-local lsp-bridge-file-last-size (buffer-size))
+      (lsp-bridge-call-file-api "update_file" (buffer-name)))
+
     (unless (eq last-command 'mwheel-scroll)
       (lsp-bridge-call-async "search_file_words_rebuild_cache"))))
 
@@ -1588,12 +1597,14 @@ So we build this macro to restore postion after code format."
             (and lsp-bridge-enable-org-babel (eq major-mode 'org-mode)))
     ;; When user open buffer by `ido-find-file', lsp-bridge will throw `FileNotFoundError' error.
     ;; So we need save buffer to disk before enable `lsp-bridge-mode'.
-    (unless (file-exists-p (buffer-file-name))
+    (unless (and (buffer-file-name) (file-exists-p (buffer-file-name)))
       (save-buffer))
 
     (setq-local acm-backend-lsp-completion-trigger-characters nil)
     (setq-local acm-backend-lsp-completion-position nil)
-    (setq-local acm-backend-lsp-filepath (file-truename buffer-file-name))
+    (if buffer-file-name
+        (setq-local acm-backend-lsp-filepath (file-truename buffer-file-name))
+      (setq-local acm-backend-lsp-filepath "/Users/royokong/temp"))
     (setq-local acm-backend-lsp-items (make-hash-table :test 'equal))
     (setq-local acm-backend-lsp-server-names nil)
 
