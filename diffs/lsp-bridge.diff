diff --git a/acm/acm-frame.el b/acm/acm-frame.el
index 7b5fd28..330e7ec 100644
--- a/acm/acm-frame.el
+++ b/acm/acm-frame.el
@@ -152,13 +152,15 @@
                 ))
   (add-function :after after-focus-change-function #'acm-frame-restore-font))
 
-(cl-defmacro acm-frame-new (frame frame-buffer buffer-name &optional max-width max-height popup-pos)
+(cl-defmacro acm-frame-new (frame frame-buffer buffer-name &optional max-width max-height popup-pos margin)
   `(progn
      (when (and (frame-live-p ,frame)
                 (not (eq (frame-parent ,frame) (selected-frame))))
        (acm-frame-delete-frame ,frame))
 
-     (acm-frame-create-frame-if-not-exist ,frame ,frame-buffer ,buffer-name 1 t)
+     (if ,margin
+         (acm-frame-create-frame-if-not-exist ,frame ,frame-buffer ,buffer-name ,margin t)
+       (acm-frame-create-frame-if-not-exist ,frame ,frame-buffer ,buffer-name 1 t))
 
      (acm-frame-set-frame-max-size ,frame ,max-width ,max-height)
 
diff --git a/acm/acm.el b/acm/acm.el
index dab90e7..b375442 100644
--- a/acm/acm.el
+++ b/acm/acm.el
@@ -209,7 +209,8 @@
     (define-key map "\M-." #'acm-select-first)
     (define-key map "\C-v" #'acm-select-next-page)
     (define-key map "\M-v" #'acm-select-prev-page)
-    (define-key map [tab]  #'acm-complete)
+    (define-key map [tab]  #'acm-select-next)
+    (define-key map [backtab]  #'acm-select-prev)
     (define-key map "\C-m" #'acm-complete)
     (define-key map "\t" #'acm-complete)
     (define-key map "\n" #'acm-complete)
@@ -221,8 +222,8 @@
     (define-key map "\M-k" #'acm-doc-scroll-down)
     (define-key map "\M-l" #'acm-hide)
     (define-key map "\C-g" #'acm-hide)
-    (define-key map "1" #'acm-insert-number-or-complete-candiate)
-    (define-key map "2" #'acm-insert-number-or-complete-candiate)
+    ;;(define-key map "1" #'acm-insert-number-or-complete-candiate)
+    ;;(define-key map "2" #'acm-insert-number-or-complete-candiate)
     (define-key map "3" #'acm-insert-number-or-complete-candiate)
     (define-key map "4" #'acm-insert-number-or-complete-candiate)
     (define-key map "5" #'acm-insert-number-or-complete-candiate)
@@ -230,7 +231,7 @@
     (define-key map "7" #'acm-insert-number-or-complete-candiate)
     (define-key map "8" #'acm-insert-number-or-complete-candiate)
     (define-key map "9" #'acm-insert-number-or-complete-candiate)
-    (define-key map "0" #'acm-insert-number-or-complete-candiate)
+    ;;(define-key map "0" #'acm-insert-number-or-complete-candiate)
     map)
   "Keymap used when popup is shown.")
 
@@ -447,6 +448,12 @@ Only calculate template candidate when type last character."
               (max (- acm-menu-length (+ (length template-first-part-candidates) (length tabnine-candidates)))
                    mode-candidates-min-index))
 
+        ;; always show codeium candidates
+        (when codeium-candidates
+          (setq mode-candidates-split-index
+                (max (- mode-candidates-split-index (length codeium-candidates))
+                     mode-candidates-min-index)))
+
         ;; Build mode candidates.
         (if (> (length mode-candidates) mode-candidates-split-index)
             (progn
@@ -822,7 +829,7 @@ The key of candidate will change between two LSP results."
                         (+ cursor-y offset-y))))
     (acm-frame-set-frame-position acm-menu-frame acm-frame-x acm-frame-y)))
 
-(defun acm-doc-try-show (&optional update-completion-item)
+(defun acm-doc-try-show2 (&optional update-completion-item)
   (when acm-enable-doc
     (let* ((candidate (acm-menu-current-candidate))
            (backend (plist-get candidate :backend))
@@ -866,6 +873,19 @@ The key of candidate will change between two LSP results."
           ;; Hide doc frame immediately if backend is not LSP.
           (_ (acm-doc-hide)))))))
 
+(defvar acm-doc-show-timer nil)
+(defvar acm-doc-show-delay 0.5)
+
+(defun acm-doc-try-show (&optional update-completion-item)
+  "Show doc frame."
+  (acm-doc-hide)
+  (acm-cancel-timer acm-doc-show-timer)
+  (setq acm-doc-show-timer
+        (run-with-idle-timer acm-doc-show-delay nil
+                             (lambda ()
+                               (if (frame-visible-p acm-menu-frame)
+                                   (acm-doc-try-show2 update-completion-item))))))
+
 (defun acm-doc-frame-adjust ()
   (let* ((emacs-width (frame-pixel-width))
          (emacs-height (frame-pixel-height))
diff --git a/core/codeium.py b/core/codeium.py
index 9ae0f26..f908309 100644
--- a/core/codeium.py
+++ b/core/codeium.py
@@ -23,6 +23,8 @@ import time
 import traceback
 import urllib.parse
 import urllib.request
+from distutils.version import StrictVersion
+import threading
 
 from core.utils import *
 
@@ -44,29 +46,22 @@ class Codeium:
         self.counter = 1
         self.wait_request = []
 
-    def complete(
-        self,
-        cursor_offset,
-        editor_language,
-        tab_size,
-        text,
-        insert_spaces,
-        prefix,
-        language,
-    ):
+    def cancel_copmlete(self):
+        for _ in self.wait_request:
+            self.metadata['request_id'] = self.wait_request.pop()
+            self.post_request(self.make_url('CancelRequest'), {'metadata': self.metadata})
+
+    def complete(self, cursor_offset, editor_language, tab_size, text, insert_spaces, prefix, language):
         self.get_info()
         self.run_local_server()
 
+        thread = threading.Thread(target=self.cancel_copmlete)
+        thread.start()
+
         # utf-8 cursor offset
         cursor_offset = len(text[:cursor_offset].encode("utf-8", errors="ignore"))
         self.current_cussor_offset = cursor_offset
 
-        for _ in self.wait_request:
-            self.metadata["request_id"] = self.wait_request.pop()
-            self.post_request(
-                self.make_url("CancelRequest"), {"metadata": self.metadata}
-            )
-
         self.metadata["request_id"] = self.counter
         self.wait_request.append(self.counter)
         self.counter += 1
@@ -144,16 +139,12 @@ class Codeium:
                 labels = label.strip().split("\n")
                 first_line = labels[0]
 
-                document = f"```{language}\n{label}\n```"
-
-                # Don't make display label bigger than max length.
-                display_label = first_line
-                if len(first_line) > self.display_label_max_length:
-                    display_label = "... " + display_label[len(first_line) - self.display_label_max_length:]
+                # document = f"```{language}\n{label}\n```" if len(labels) > 1 else ""
+                document = label if len(labels) > 1 else ""
 
-                # Only hide documentation when label smaller than max length and only 1 line
-                if len(labels) <= 1 and len(first_line) <= self.display_label_max_length:
-                        document = ""
+                display_label = labels[0]
+                if len(display_label) > self.display_label_max_length or len(labels) > 1:
+                        display_label = display_label[:self.display_label_max_length - 4] + " ..."
 
                 completion_parts = completion.get("completionParts", [{}])[0]
                 annotation = (
diff --git a/core/fileaction.py b/core/fileaction.py
index c29d029..46ed609 100755
--- a/core/fileaction.py
+++ b/core/fileaction.py
@@ -201,15 +201,19 @@ class FileAction:
         self.last_change_file_time = time.time()
 
         # Send textDocument/completion 100ms later.
-        delay = 0 if is_running_in_server() else 0.1
-        self.try_completion_timer = threading.Timer(delay, lambda : self.try_completion(position, before_char, prefix))
-        self.try_completion_timer.start()
-        
+        if position['line'] < 0:
+            print("error in change file", start, end, range_length, change_text, position, before_char, buffer_name, prefix, self.org_line_bias)
+        else:
+            delay = 0 if is_running_in_server() else 0.1
+            self.try_completion_timer = threading.Timer(delay, lambda : self.try_completion(position, before_char, prefix))
+            self.try_completion_timer.start()
+
     def update_file(self, buffer_name, org_line_bias=None):
         self.org_line_bias = org_line_bias
         buffer_content = get_buffer_content(self.filepath, buffer_name)
         for lsp_server in self.get_lsp_servers():
             lsp_server.send_whole_change_notification(self.filepath, self.version, buffer_content)
+            print(lsp_server, 'update_file')
         self.version += 1
 
     def try_completion(self, position, before_char, prefix):
@@ -388,7 +392,13 @@ class FileAction:
     def rename_file(self, old_filepath, new_filepath):
         self.get_lsp_servers()[0].send_did_rename_files_notification(old_filepath, new_filepath)
 
+    completion_request_ids = -1
     def send_server_request(self, lsp_server, handler_name, *args, **kwargs):
+        if self.completion_request_ids > 0 and handler_name == "completion":
+            # Drop completion request if previous completion request is not finished.
+            print("Drop completion request for {}".format(self.filepath), self.completion_request_ids)
+            # return
+
         handler: Handler = self.method_handlers[lsp_server.server_info["name"]][handler_name]
         
         handler.latest_request_id = request_id = generate_request_id()
@@ -404,6 +414,10 @@ class FileAction:
             method=handler.method,
             params=params,
             request_id=request_id)
+
+        if handler_name == "completion":
+            self.completion_request_ids = request_id
+            self.completion_start_time = time.time()
         
     def exit(self):
         for lsp_server in (self.org_lang_servers.values() if self.org_file else self.get_lsp_servers()):
diff --git a/core/lspserver.py b/core/lspserver.py
index a0c3cce..341267d 100755
--- a/core/lspserver.py
+++ b/core/lspserver.py
@@ -626,6 +626,14 @@ class LspServer:
             else:
                 if "method" not in message and message["id"] in self.request_dict:
                     handler = self.request_dict[message["id"]]
+                    if handler.method == 'textDocument/completion':
+                        for key  in self.files:
+                            fileaction = self.files[key]
+                            if message['id'] == fileaction.completion_request_ids:
+                                fileaction.completion_request_ids = -1
+                                import time
+                                print(fileaction, message['id'],
+                                      time.time() - fileaction.completion_start_time)
                     handler.handle_response(
                         request_id=message["id"],
                         response=message["result"],
diff --git a/core/search_file_words.py b/core/search_file_words.py
index db3edf8..b3270e7 100755
--- a/core/search_file_words.py
+++ b/core/search_file_words.py
@@ -79,7 +79,11 @@ class SearchFileWords:
             return
 
         if buffer_name in self.search_content_dict:
-            content = rebuild_content_from_diff(self.search_content_dict[buffer_name], start_pos, end_pos, change_text)
+            try:
+                content = rebuild_content_from_diff(self.search_content_dict[buffer_name], start_pos, end_pos, change_text)
+            except:
+                print('change_buffer error: buffer_name: {}, start_pos: {}, end_pos: {}, change_text: {}'.format(buffer_name, start_pos, end_pos, change_text))
+                assert 0
         else:
             content = get_emacs_func_result('get-buffer-content', buffer_name, True)
 
@@ -125,12 +129,14 @@ class SearchFileWords:
             logger.error(traceback.format_exc())
             
     def search_word(self, prefix, all_words):
-        match_words = list(filter(lambda word: word.lower().startswith(prefix.lower()), all_words))
+
+        sprefix = prefix.split('.')[-1]
+        match_words = list(filter(lambda word: word.lower().startswith(sprefix.lower()), all_words))
         candidates = []
-        if prefix.isupper():
+        if prefix.isupper() and '.' not in prefix:
             candidates = list(map(lambda word: word.upper(), match_words))
         else:
-            candidates = list(map(lambda word: prefix + word[len(prefix):], match_words))
+            candidates = list(map(lambda word: prefix + word[len(sprefix):], match_words))
             
         candidates.sort(key=len, reverse=False)
         
diff --git a/langserver/pyright-background-analysis.json b/langserver/pyright-background-analysis.json
index 9444e0c..c3962be 100644
--- a/langserver/pyright-background-analysis.json
+++ b/langserver/pyright-background-analysis.json
@@ -12,7 +12,7 @@
       "autoImportCompletions": true,
       "typeshedPaths": [],
       "stubPath": "",
-      "useLibraryCodeForTypes": true,
+      "useLibraryCodeForTypes": false,
       "diagnosticMode": "openFilesOnly",
       "typeCheckingMode": "basic",
       "logLevel": "verbose",
diff --git a/lsp-bridge-diagnostic.el b/lsp-bridge-diagnostic.el
index 819ae3e..aec1f80 100644
--- a/lsp-bridge-diagnostic.el
+++ b/lsp-bridge-diagnostic.el
@@ -227,14 +227,17 @@ You can set this value with `(2 3 4) if you just need render error diagnostic."
 
     (with-current-buffer (get-buffer-create lsp-bridge-diagnostic-buffer)
       (erase-buffer)
-      (lsp-bridge-diagnostic-insert-colored-string (overlay-get diagnostic-overlay 'color) diagnostic-display-message)
+      ;;(lsp-bridge-diagnostic-insert-colored-string (overlay-get diagnostic-overlay 'color) diagnostic-display-message)
+      (insert (propertize diagnostic-display-message 'face 'flycheck-fringe-warning))
       (setq-local lsp-bridge-diagnostic-message diagnostic-message))
 
     (cond
      ((acm-frame-can-display-p)
       (acm-frame-new lsp-bridge-diagnostic-frame
                      lsp-bridge-diagnostic-buffer
-                     "lsp bridge diagnostic frame"))
+                     "lsp bridge diagnostic frame"
+                     ;; zero margin
+                     nil nil nil 0))
      (t (message diagnostic-message)))))
 
 (defun lsp-bridge-diagnostic-maybe-display-error-at-point ()
diff --git a/lsp-bridge.el b/lsp-bridge.el
index 8d26c61..59e1e1a 100644
--- a/lsp-bridge.el
+++ b/lsp-bridge.el
@@ -793,22 +793,27 @@ So we build this macro to restore postion after code format."
             (lsp-bridge-enable-org-babel
              (lsp-bridge-org-babel-check-lsp-server)))))))
 
+(defvar-local lsp-bridge-has-lsp-server--p nil)
+(defvar-local lsp-bridge-has-lsp-server--p-set nil)
 (defun lsp-bridge-has-lsp-server-p ()
   (cond ((and lsp-bridge-enable-org-babel (eq major-mode 'org-mode))
          (setq-local acm-is-elisp-mode-in-org nil)
          (lsp-bridge-org-babel-check-lsp-server))
+        (lsp-bridge-has-lsp-server--p-set lsp-bridge-has-lsp-server--p)
         (t
-         (when-let* ((filename (or (ignore-errors (file-truename buffer-file-name))
-                                   (when (lsp-bridge-is-remote-file)
-                                     lsp-bridge-remote-file-path))))
-           (let* ((multi-lang-server-by-extension (or (lsp-bridge-get-multi-lang-server-by-extension filename)
-                                                      (lsp-bridge-get-multi-lang-server-by-file-mode filename)))
-                  (lang-server-by-extension (or (lsp-bridge-get-single-lang-server-by-extension filename)
-                                                (lsp-bridge-get-single-lang-server-by-file-mode filename))))
-             (if multi-lang-server-by-extension
-                 multi-lang-server-by-extension
-               lang-server-by-extension)
-             )))))
+         (setq-local lsp-bridge-has-lsp-server--p-set t)
+         (setq-local lsp-bridge-has-lsp-server--p
+                     (when-let* ((filename (or (ignore-errors (file-truename buffer-file-name))
+                                               (when (lsp-bridge-is-remote-file)
+                                                 lsp-bridge-remote-file-path))))
+                       (let* ((multi-lang-server-by-extension (or (lsp-bridge-get-multi-lang-server-by-extension filename)
+                                                                  (lsp-bridge-get-multi-lang-server-by-file-mode filename)))
+                              (lang-server-by-extension (or (lsp-bridge-get-single-lang-server-by-extension filename)
+                                                            (lsp-bridge-get-single-lang-server-by-file-mode filename))))
+                         (if multi-lang-server-by-extension
+                             multi-lang-server-by-extension
+                           lang-server-by-extension))))
+             )))
 
 (defun lsp-bridge-call-async (method &rest args)
   "Call Python EPC function METHOD and ARGS asynchronously."
@@ -964,7 +969,7 @@ So we build this macro to restore postion after code format."
       (cond ((member this-command-string '("self-insert-command" "org-self-insert-command"))
              (setq this-command 'acm-filter-insert-char)
              (setq last-command 'acm-filter-insert-char))
-            ((member this-command-string '("delete-block-backward" "grammatical-edit-backward-delete"))
+            ((member this-command-string '("delete-block-backward" "grammatical-edit-backward-delete" "evil-delete-backward-char-and-join"))
              (setq this-command 'acm-filter-delete-char)
              (setq last-command 'acm-filter-delete-char))
             ))))
@@ -1042,29 +1047,33 @@ So we build this macro to restore postion after code format."
                                             server-name
                                             completion-trigger-characters
                                             server-names)
-  (lsp-bridge--with-file-buffer filename filehost
-                                ;; Save completion items.
-                                (setq-local acm-backend-lsp-completion-position position)
-                                (setq-local acm-backend-lsp-completion-trigger-characters completion-trigger-characters)
-                                (setq-local acm-backend-lsp-server-names server-names)
-                                (setq-local acm-backend-lsp-fetch-completion-item-ticker nil)
-
-                                (let* ((lsp-items acm-backend-lsp-items)
-                                       (completion-table (make-hash-table :test 'equal)))
-                                  (dolist (item candidates)
-                                    (plist-put item :annotation (capitalize (plist-get item :icon)))
-                                    (puthash (plist-get item :key) item completion-table))
-                                  (puthash server-name completion-table lsp-items)
-                                  (setq-local acm-backend-lsp-items lsp-items))
-                                (lsp-bridge-try-completion)))
+  ;; avoid completion when cursor move in org
+  (when (or (not (eq major-mode 'org-mode))
+         (eq (plist-get (lsp-bridge--point-position (point)) :character)
+            (plist-get position :character)))
+    (lsp-bridge--with-file-buffer filename filehost
+                                  ;; Save completion items.
+                                  (setq-local acm-backend-lsp-completion-position position)
+                                  (setq-local acm-backend-lsp-completion-trigger-characters completion-trigger-characters)
+                                  (setq-local acm-backend-lsp-server-names server-names)
+                                  (setq-local acm-backend-lsp-fetch-completion-item-ticker nil)
+                                  
+                                  (let* ((lsp-items acm-backend-lsp-items)
+                                         (completion-table (make-hash-table :test 'equal)))
+                                    (dolist (item candidates)
+                                      (plist-put item :annotation (capitalize (plist-get item :icon)))
+                                      (puthash (plist-get item :key) item completion-table))
+                                    (puthash server-name completion-table lsp-items)
+                                    (setq-local acm-backend-lsp-items lsp-items))
+                                  (lsp-bridge-try-completion))))
 
 (defun lsp-bridge-try-completion ()
   (cond (lsp-bridge-prohibit-completion
          (setq-local lsp-bridge-prohibit-completion nil))
         (t
          ;; Don't popup completion menu when `lsp-bridge-last-change-position' (cursor before send completion request) is not equal current cursor position.
-         (when (equal lsp-bridge-last-change-position
-                      (list (current-buffer) (buffer-chars-modified-tick) (point)))
+         (when (or t (equal lsp-bridge-last-change-position
+                              (list (current-buffer) (buffer-chars-modified-tick) (point))))
            ;; Try popup completion frame.
            (if (cl-every (lambda (pred)
                            (if (functionp pred)
@@ -1269,6 +1278,8 @@ So we build this macro to restore postion after code format."
   (setq lsp-bridge-last-change-position
         (list (current-buffer) (buffer-chars-modified-tick) (point))))
 
+(defvar-local lsp-org-babel-save-current--point nil)
+
 (defun lsp-bridge-monitor-after-change (begin end length)
   ;; Use `save-match-data' protect match data, avoid conflict with command call `search-regexp'.
   (save-match-data
@@ -1276,6 +1287,9 @@ So we build this macro to restore postion after code format."
       ;; Record last command to `lsp-bridge-last-change-command'.
       (setq lsp-bridge-last-change-command (format "%s" this-command))
 
+      (if (member lsp-bridge-last-change-command '("evil-delete-backward-char-and-join"))
+          (setq-local lsp-bridge-prohibit-completion t))
+
       ;; Record last change position to avoid popup outdate completions.
       (setq lsp-bridge-last-change-position (list (current-buffer) (buffer-chars-modified-tick) (point)))
 
@@ -1286,14 +1300,32 @@ So we build this macro to restore postion after code format."
       (lsp-bridge-org-babel-monitor-after-change begin end length)
 
       ;; Send change_file request to trigger LSP completion.
-      (when (or (lsp-bridge-call-file-api-p)
-                (lsp-bridge-is-remote-file))
+      (when-let ((pos (lsp-bridge--position))
+                 (ok (or (lsp-bridge-call-file-api-p)
+                         (lsp-bridge-is-remote-file))))
+        ;; patch for org babel
+        (when (and (member this-command '(+org/return evil-org-open-below))
+                   (not (eq (plist-get lsp-bridge--before-change-begin-pos :line)
+                            (plist-get lsp-bridge--before-change-end-pos :line)))
+                   lsp-org-babel-save-current--point
+                   (> length 1))
+          (setq end lsp-org-babel-save-current--point)
+          (setq begin lsp-org-babel-save-current--point)
+          (setq length 0)
+          (save-excursion
+            (goto-char lsp-org-babel-save-current--point)
+            (forward-line)
+            (setq end (eol)))
+          (setq lsp-bridge--before-change-begin-pos (lsp-bridge--point-position begin))
+          (setq lsp-bridge--before-change-end-pos (lsp-bridge--point-position begin))
+          (setq pos (lsp-bridge--point-position end)))
+
         (lsp-bridge-call-file-api "change_file"
                                   lsp-bridge--before-change-begin-pos
                                   lsp-bridge--before-change-end-pos
                                   length
                                   (buffer-substring-no-properties begin end)
-                                  (lsp-bridge--position)
+                                  pos
                                   (acm-char-before)
                                   (buffer-name)
                                   (acm-get-input-prefix)))
@@ -1301,7 +1333,6 @@ So we build this macro to restore postion after code format."
 
       ;; Complete other non-LSP backends.
       (lsp-bridge-complete-other-backends)
-
       ;; Update search words backend.
       (lsp-bridge-search-words-update
        lsp-bridge--before-change-begin-pos
@@ -1319,6 +1350,7 @@ So we build this macro to restore postion after code format."
 
         ;; Codeium search.
         (when (and acm-enable-codeium
+                   (not lsp-bridge-prohibit-completion)
                    ;; Codeium backend not support remote file now, disable it temporary.
                    (not (lsp-bridge-is-remote-file))
                    ;; Don't enable codeium on Markdown mode, Org mode, ielm and minibuffer, very disruptive to writing.
@@ -2151,8 +2183,9 @@ SymbolKind (defined in the LSP)."
     ("tabnine" (setq-local acm-backend-tabnine-items items))
     ("tailwind-keywords" (setq-local acm-backend-tailwind-items items))
     ("paths" (setq-local acm-backend-path-items items)))
-  (lsp-bridge-try-completion))
-
+  ;; escape file-words update, cause codeium backend is not updated
+  (unless (equal backend-name "file-words")
+    (lsp-bridge-try-completion)))
 
 ;;; support which-func-mode
 ;;;
diff --git a/lsp_bridge.py b/lsp_bridge.py
index 88c6c17..b9cd3cb 100755
--- a/lsp_bridge.py
+++ b/lsp_bridge.py
@@ -680,6 +680,9 @@ class LspBridge:
     def build_file_action_function(self, name):
         def _do(filepath, *args):
             open_file_success = True
+            if filepath == '/Users/royokong/.org/roam/.org-src-babel':
+                print('skip org src babel')
+                return
 
             if not is_in_path_dict(FILE_ACTION_DICT, filepath):
                 open_file_success = self.open_file(filepath)  # _do is called inside event_loop, so we can block here.
@@ -766,12 +769,15 @@ def read_lang_server_info(lang_server_path):
 
 def load_single_server_info(lang_server):
     lang_server_info_path = ""
-    if os.path.exists(lang_server) and os.path.dirname(lang_server) != "":
-        # If lang_server is real file path, we load the LSP server configuration from the user specified file.
-        lang_server_info_path = lang_server
-    else:
-        # Otherwise, we load LSP server configuration from file lsp-bridge/langserver/lang_server.json.
-        lang_server_info_path = get_lang_server_path(lang_server)
+    try:
+        if os.path.exists(lang_server) and os.path.dirname(lang_server) != "":
+            # If lang_server is real file path, we load the LSP server configuration from the user specified file.
+            lang_server_info_path = lang_server
+        else:
+            # Otherwise, we load LSP server configuration from file lsp-bridge/langserver/lang_server.json.
+            lang_server_info_path = get_lang_server_path(lang_server)
+    except TypeError:
+        print(f'{lang_server} is error in load_single_server_info')
 
     with open(lang_server_info_path, encoding="utf-8", errors="ignore") as f:
         return read_lang_server_info(f)
