diff --git a/sort-tab.el b/sort-tab.el
index 9d93fdb..958ae11 100644
--- a/sort-tab.el
+++ b/sort-tab.el
@@ -176,6 +176,7 @@ If you want buffer hide, return t, or return nil.")
     (local-set-key (kbd "<drag-mouse-1>") 'push-button))
 
   ;; Add update hook.
+  ;; (add-hook 'window-configuration-change-hook #'sort-tab-update-list)
   (add-hook 'buffer-list-update-hook #'sort-tab-update-list))
 
 (defun sort-tab-create-window ()
@@ -208,10 +209,11 @@ If you want buffer hide, return t, or return nil.")
     (set-window-parameter sort-tab-window 'no-delete-other-windows nil)
     (set-window-parameter sort-tab-window 'window-side nil)
     (set-window-parameter sort-tab-window 'window-slot nil)
-    (set-window-parameter sort-tab-window 'no-other-window nil)
+    (set-window-parameter sort-tab-window 'no-other-window nil))
 
     ;; Kill sort-tab window.
-    (delete-window (get-buffer-window (sort-tab-get-buffer))))
+  (when-let ((buf (get-buffer-window (sort-tab-get-buffer))))
+    (delete-window buf))
 
   ;; Reset sort-tab window.
   (setq sort-tab-window nil)
@@ -220,6 +222,7 @@ If you want buffer hide, return t, or return nil.")
   (sort-tab-stop-count-freq)
 
   ;; Remove update hook.
+  ;; (remove-hook 'window-configuration-change-hook #'sort-tab-update-list)
   (remove-hook 'buffer-list-update-hook #'sort-tab-update-list))
 
 (defun sort-tab-live-p ()
@@ -239,7 +242,8 @@ If you want buffer hide, return t, or return nil.")
 
 (defun sort-tab-stop-count-freq ()
   "Stop counting buffer used frequency."
-  (cancel-timer sort-tab-buffer-freq-count-timer)
+  (if (timerp sort-tab-buffer-freq-count-timer)
+      (cancel-timer sort-tab-buffer-freq-count-timer))
   (setq sort-tab-buffer-freq-count-timer nil))
 
 (defun sort-tab-buffer-freq (buf)
@@ -306,13 +310,16 @@ If you want buffer hide, return t, or return nil.")
 
 (defun sort-tab-buffer-need-hide-p (buf)
   (let* ((name (buffer-name buf)))
+    (and
+     (not (cl-some (lambda (prefix) (string-prefix-p prefix name)) '("*--ein")));;white list
+     ;;(not (cl-some (lambda (prefix) (string-prefix-p prefix name)) '("*doom:vterm")));;white list
     (or
      (cl-some (lambda (prefix) (string-prefix-p prefix name)) '("*" " *" "COMMIT_EDITMSG"))
      (eq (aref name 0) ?\s)
      (sort-tab-is-magit-buffer-p buf)
      (when sort-tab-hide-function
        (funcall sort-tab-hide-function buf))
-     )))
+     ))))
 
 (defun sort-tab-is-normal-buffer-p (current-buffer)
   (and
@@ -340,13 +347,16 @@ If you want buffer hide, return t, or return nil.")
      ,@body
 
      (when (eq sort-tab-align 'center)
-       (goto-char (point-min))
-       (insert sort-tab-propertized-separator)
-       (let* ((width (window-width (get-buffer-window)))
-              (content-length (length (buffer-string)))
-              (padding (max 0 (/ (- width content-length) 2))))
-         (goto-char (point-min))
-         (insert (make-string padding ?\s))))
+       (let ((text-cols (apply #'max (cl-loop for frame in (frame-list)
+                                              collect (frame-text-cols frame)))))
+         (if (> (- text-cols (point-max)) 0)
+             (indent-line-to (/ (- text-cols (point-max)) 2)))
+
+         ;; close *sort-tab* in other frame
+         (unless (eq text-cols (frame-text-cols))
+           (cl-loop for window in (window-list)
+                    if (equal "*sort-tab*" (buffer-name (window-buffer window)))
+                    do (delete-window window)))))
 
      ;; Record last active buffer.
      (setq sort-tab-last-active-buffer (current-buffer))
@@ -381,6 +391,7 @@ If you want buffer hide, return t, or return nil.")
             (current-tab-end-column 0)
             (tab-window (get-buffer-window (sort-tab-get-buffer)))
             (buffer-index -1)
+            (tab-count 0)
             found-current-tab
             tab)
        ;; Calculate the current tab column.
@@ -388,10 +399,21 @@ If you want buffer hide, return t, or return nil.")
          ;; Insert tab.
          (setq buffer-index (+ buffer-index 1))
          (setq tab (sort-tab-get-tab-name buf current-buffer buffer-index))
-         (insert-button tab
-                        'action `(lambda (x)
-                                   (sort-tab-select-visible-nth-tab ,(1+ buffer-index)))
-                        'face '(:underline nil))
+         (cl-incf tab-count)
+         (if (eq buf current-buffer)
+             (insert tab)
+           (insert
+            (concat
+             (propertize
+              (prin1-to-string tab-count)
+              'face 'bold)
+             "."
+             (propertize
+              (substring-no-properties tab 1)
+              'face
+              (if (eq (frame-parameter nil 'background-mode) 'dark)
+                  '(:foreground "#bdae93" )
+                '(:foreground "#665c54"))))))
          (insert sort-tab-propertized-separator)
 
          ;; Calculate the current tab column.
@@ -443,6 +465,12 @@ If you want buffer hide, return t, or return nil.")
              (when (sort-tab-is-eaf-browser-buffer-p buf)
                (setq bufname (replace-regexp-in-string "\\s-" "" bufname)))
 
+             (when (cl-search ".org" bufname)
+               (setq bufname (replace-regexp-in-string ".*-" "" bufname)))
+
+             (when (cl-search "*doom:vterm" bufname)
+               (setq bufname "vterm"))
+
              (if (> (length bufname) sort-tab-name-max-length)
                  (format "%s%s" (substring bufname 0 (- sort-tab-name-max-length (length ellipsis))) ellipsis)
                bufname)))
@@ -526,7 +554,8 @@ If you want buffer hide, return t, or return nil.")
   (let ((visible-buffers sort-tab-visible-buffers))
     (setq sort-tab-visible-buffers nil)
     (dolist (buf visible-buffers)
-      (kill-buffer buf))))
+      (unless (buffer-modified-p buf)
+        (kill-buffer buf)))))
 
 (defun sort-tab-close-other-tabs ()
   (interactive)
@@ -576,15 +605,37 @@ If you want buffer hide, return t, or return nil.")
 
 (defun sort-tab-select-visible-nth-tab (&optional tab-index)
   (interactive "p")
-  (switch-to-buffer (nth (1- tab-index) sort-tab-visible-buffers)))
+  (let ((s-buffer (nth (1- tab-index) sort-tab-visible-buffers))
+        swindow sframe)
+    (if (> (frame-width) (frame-height))
+        ;; only for vertical frame
+        (cl-loop for frame in (frame-list)
+                unless (eq frame (selected-frame))
+                do (with-selected-frame frame
+                        (cl-loop for window in (window-list)
+                                if (eq s-buffer (window-buffer window))
+                                return (setq sframe frame
+                                        swindow window)))))
+    (if (eq sframe nil)
+        (switch-to-buffer s-buffer)
+      (remove-function after-focus-change-function #'eaf--topmost-focus-change)
+      (select-frame-set-input-focus sframe)
+      (run-with-timer 0.1 nil
+                      (lambda ()
+                        (add-function :after after-focus-change-function #'eaf--topmost-focus-change)))
+      (select-window swindow))))
 
 (defun sort-tab-select-visible-tab ()
   (interactive)
   (let* ((event last-command-event)
          (key (make-vector 1 event))
-         (key-desc (key-description key)))
-    (sort-tab-select-visible-nth-tab
-     (string-to-number (car (last (split-string key-desc "-")))))))
+         (current-buffer (window-buffer))
+         (key-desc (key-description key))
+         (index (string-to-number (car (last (split-string key-desc "-"))))))
+    (if (sort-tab-is-hidden-buffer-p current-buffer)
+        (setq index (1- index)))
+
+    (sort-tab-select-visible-nth-tab index)))
 
 (defun sort-tab-kill-buffer-advisor (orig-fun &optional arg &rest args)
   (if (equal (buffer-name) sort-tab-buffer-name)
