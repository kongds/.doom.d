diff --git a/sort-tab.el b/sort-tab.el
index 626b320..aac97de 100644
--- a/sort-tab.el
+++ b/sort-tab.el
@@ -196,10 +196,11 @@
     (set-window-parameter sort-tab-window 'no-delete-other-windows nil)
     (set-window-parameter sort-tab-window 'window-side nil)
     (set-window-parameter sort-tab-window 'window-slot nil)
-    (set-window-parameter sort-tab-window 'no-other-window nil)
+    (set-window-parameter sort-tab-window 'no-other-window nil))
 
     ;; Kill sort-tab window.
-    (delete-window (get-buffer-window (sort-tab-get-buffer))))
+  (when-let ((buf (get-buffer-window (sort-tab-get-buffer))))
+    (delete-window buf))
 
   ;; Reset sort-tab window.
   (setq sort-tab-window nil)
@@ -227,7 +228,8 @@
 
 (defun sort-tab-stop-count-freq ()
   "Stop counting buffer used frequency."
-  (cancel-timer sort-tab-buffer-freq-count-timer)
+  (if (timerp sort-tab-buffer-freq-count-timer)
+      (cancel-timer sort-tab-buffer-freq-count-timer))
   (setq sort-tab-buffer-freq-count-timer nil))
 
 (defun sort-tab-buffer-freq (buf)
@@ -279,11 +281,14 @@
 
 (defun sort-tab-buffer-need-hide-p (buf)
   (let* ((name (buffer-name buf)))
+    (and
+     (not (cl-some (lambda (prefix) (string-prefix-p prefix name)) '("*--ein")));;white list
+     ;;(not (cl-some (lambda (prefix) (string-prefix-p prefix name)) '("*doom:vterm")));;white list
     (or
      (cl-some (lambda (prefix) (string-prefix-p prefix name)) '("*" " *" "COMMIT_EDITMSG"))
      (eq (aref name 0) ?\s)
      (sort-tab-is-magit-buffer-p buf)
-     )))
+     ))))
 
 (defun sort-tab-is-normal-buffer-p (current-buffer)
   (and
@@ -311,26 +316,28 @@
      ,@body
 
      (when (eq sort-tab-align 'center)
-       (goto-char (point-min))
-       (insert sort-tab-propertized-separator)
-       (let* ((width (window-width (get-buffer-window)))
-              (content-length (length (buffer-string)))
-              (padding (max 0 (/ (- width content-length) 2))))
-         (goto-char (point-min))
-         (insert (make-string padding ?\s))))
+       (let ((text-cols (apply #'max (cl-loop for frame in (frame-list)
+                                              collect (frame-text-cols frame)))))
+         (if (> (- text-cols (point-max)) 0)
+             (indent-line-to (/ (- text-cols (point-max)) 2)))
+
+         ;; close *sort-tab* in other frame
+         (unless (eq text-cols (frame-text-cols))
+           (cl-loop for window in (window-list)
+                    if (equal "*sort-tab*" (buffer-name (window-buffer window)))
+                    do (delete-window window)))))
 
      ;; Record last active buffer.
      (setq sort-tab-last-active-buffer (current-buffer))
      ))
 
 (defun sort-tab-update-list ()
+  (when (not (equal (window-buffer) (sort-tab-get-buffer)))
+  (setq sort-tab-update-list-updating t)
   (let ((current-buffer (window-buffer)))
     (cond
-     ;; Erase sort-tab content if current buffer is sort-tab buffer.
-     ((string-equal sort-tab-buffer-name (buffer-name current-buffer))
-      (sort-tab-update-tabs))
      ;; Display tabs if current-buffer is normal buffer.
-     (t
+     ((sort-tab-is-normal-buffer-p current-buffer)
       ;; Debug usage.
       ;; (with-current-buffer (get-buffer-create "sort-tab-debug")
       ;;   (goto-char (point-max))
@@ -340,23 +347,41 @@
 
       (let* ((current-tab-start-column 0)
              (current-tab-end-column 0)
+             (tab-count 0)
              (tab-window (get-buffer-window (sort-tab-get-buffer)))
              found-current-tab
              tab)
         (sort-tab-update-tabs
-         ;; Show hide buffer at left when current buffer is match hidden rule.
-         (when (sort-tab-is-hidden-buffer-p current-buffer)
-           (insert (sort-tab-get-tab-name current-buffer current-buffer))
-           (insert sort-tab-propertized-separator))
-
          ;; Don't sort tabs if using sort-tab commands.
          (unless (string-prefix-p "sort-tab-" (prin1-to-string last-command))
-           (setq sort-tab-visible-buffers (sort-tab-get-buffer-list)))
+           (setq sort-tab-visible-buffers
+                  (sort-tab-get-buffer-list)))
+
+         (setq sort-tab-visible-buffers
+               (-filter
+                (lambda (buf)
+                    ;; filter #<killed buffer>
+                    (buffer-name buf)) sort-tab-visible-buffers))
 
          (dolist (buf sort-tab-visible-buffers)
            ;; Insert tab.
            (setq tab (sort-tab-get-tab-name buf current-buffer))
-           (insert tab)
+           ;; (insert tab)
+           (cl-incf tab-count)
+           (if (eq buf current-buffer)
+               (insert tab)
+             (insert
+              (concat
+               (propertize
+                (prin1-to-string tab-count)
+                'face 'bold)
+               "."
+               (propertize
+                (substring-no-properties tab 1)
+                'face
+                (if (eq (frame-parameter nil 'background-mode) 'dark)
+                    '(:foreground "#bdae93" )
+                  '(:foreground "#665c54"))))))
            (insert sort-tab-propertized-separator)
 
            ;; Calculate the current tab column.
@@ -373,7 +398,16 @@
                     (scroll-left (+ (- current-tab-end-column (window-hscroll) (window-width)) (/ (window-width) 2))))
                    ((< current-tab-start-column (window-hscroll))
                     (set-window-hscroll tab-window current-tab-start-column))
-                   )))))))))
+                   ))))))
+     ;; Only display hide buffer at top if current buffer is match hide rule.
+     ((sort-tab-is-hidden-buffer-p current-buffer)
+      (sort-tab-update-tabs
+       ;; Insert current buffer.
+       (insert (sort-tab-get-tab-name current-buffer current-buffer))
+       (insert sort-tab-propertized-separator)))
+     ;; Erase sort-tab content if current buffer is sort-tab buffer.
+     ((string-equal sort-tab-buffer-name (buffer-name current-buffer))
+      (sort-tab-update-tabs))))))
 
 (defun sort-tab-get-tab-name (buf current-buffer)
   (propertize
@@ -384,6 +418,12 @@
              (when (sort-tab-is-eaf-browser-buffer-p buf)
                (setq bufname (replace-regexp-in-string "\\s-" "" bufname)))
 
+             (when (cl-search ".org" bufname)
+               (setq bufname (replace-regexp-in-string ".*-" "" bufname)))
+
+             (when (cl-search "*doom:vterm" bufname)
+               (setq bufname "vterm"))
+
              (if (> (length bufname) sort-tab-name-max-length)
                  (format "%s%s" (substring bufname 0 (- sort-tab-name-max-length (length ellipsis))) ellipsis)
                bufname)))
@@ -467,7 +507,8 @@
   (let ((visible-buffers sort-tab-visible-buffers))
     (setq sort-tab-visible-buffers nil)
     (dolist (buf visible-buffers)
-      (kill-buffer buf))))
+      (unless (buffer-modified-p buf)
+        (kill-buffer buf)))))
 
 (defun sort-tab-close-mode-tabs ()
   (interactive)
@@ -508,7 +549,25 @@
 
 (defun sort-tab-select-visible-nth-tab (&optional tab-index)
   (interactive "p")
-  (switch-to-buffer (nth (1- tab-index) sort-tab-visible-buffers)))
+  (let ((s-buffer (nth (1- tab-index) sort-tab-visible-buffers))
+        swindow sframe)
+    (if (> (frame-width) (frame-height))
+        ;; only for vertical frame
+        (cl-loop for frame in (frame-list)
+                unless (eq frame (selected-frame))
+                do (with-selected-frame frame
+                        (cl-loop for window in (window-list)
+                                if (eq s-buffer (window-buffer window))
+                                return (setq sframe frame
+                                        swindow window)))))
+    (if (eq sframe nil)
+        (switch-to-buffer s-buffer)
+      (remove-function after-focus-change-function #'eaf--topmost-focus-change)
+      (select-frame-set-input-focus sframe)
+      (run-with-timer 0.1 nil
+                      (lambda ()
+                        (add-function :after after-focus-change-function #'eaf--topmost-focus-change)))
+      (select-window swindow))))
 
 (defun sort-tab-select-visible-tab ()
   (interactive)
